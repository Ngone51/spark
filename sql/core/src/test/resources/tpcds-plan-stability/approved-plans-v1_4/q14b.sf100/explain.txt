== Physical Plan ==
TakeOrderedAndProject (116)
+- * BroadcastHashJoin Inner BuildRight (115)
   :- * Project (90)
   :  +- * Filter (89)
   :     +- * HashAggregate (88)
   :        +- Exchange (87)
   :           +- * HashAggregate (86)
   :              +- * Project (85)
   :                 +- * BroadcastHashJoin Inner BuildRight (84)
   :                    :- * Project (74)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (73)
   :                    :     :- SortMergeJoin LeftSemi (67)
   :                    :     :  :- * Sort (5)
   :                    :     :  :  +- Exchange (4)
   :                    :     :  :     +- * Filter (3)
   :                    :     :  :        +- * ColumnarToRow (2)
   :                    :     :  :           +- Scan parquet default.store_sales (1)
   :                    :     :  +- * Sort (66)
   :                    :     :     +- Exchange (65)
   :                    :     :        +- * Project (64)
   :                    :     :           +- * BroadcastHashJoin Inner BuildRight (63)
   :                    :     :              :- * Filter (8)
   :                    :     :              :  +- * ColumnarToRow (7)
   :                    :     :              :     +- Scan parquet default.item (6)
   :                    :     :              +- BroadcastExchange (62)
   :                    :     :                 +- * HashAggregate (61)
   :                    :     :                    +- Exchange (60)
   :                    :     :                       +- * HashAggregate (59)
   :                    :     :                          +- SortMergeJoin LeftSemi (58)
   :                    :     :                             :- * Sort (46)
   :                    :     :                             :  +- Exchange (45)
   :                    :     :                             :     +- * HashAggregate (44)
   :                    :     :                             :        +- Exchange (43)
   :                    :     :                             :           +- * HashAggregate (42)
   :                    :     :                             :              +- * Project (41)
   :                    :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (40)
   :                    :     :                             :                    :- * Project (18)
   :                    :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (17)
   :                    :     :                             :                    :     :- * Filter (11)
   :                    :     :                             :                    :     :  +- * ColumnarToRow (10)
   :                    :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
   :                    :     :                             :                    :     +- BroadcastExchange (16)
   :                    :     :                             :                    :        +- * Project (15)
   :                    :     :                             :                    :           +- * Filter (14)
   :                    :     :                             :                    :              +- * ColumnarToRow (13)
   :                    :     :                             :                    :                 +- Scan parquet default.date_dim (12)
   :                    :     :                             :                    +- BroadcastExchange (39)
   :                    :     :                             :                       +- SortMergeJoin LeftSemi (38)
   :                    :     :                             :                          :- * Sort (23)
   :                    :     :                             :                          :  +- Exchange (22)
   :                    :     :                             :                          :     +- * Filter (21)
   :                    :     :                             :                          :        +- * ColumnarToRow (20)
   :                    :     :                             :                          :           +- Scan parquet default.item (19)
   :                    :     :                             :                          +- * Sort (37)
   :                    :     :                             :                             +- Exchange (36)
   :                    :     :                             :                                +- * Project (35)
   :                    :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (34)
   :                    :     :                             :                                      :- * Project (29)
   :                    :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (28)
   :                    :     :                             :                                      :     :- * Filter (26)
   :                    :     :                             :                                      :     :  +- * ColumnarToRow (25)
   :                    :     :                             :                                      :     :     +- Scan parquet default.catalog_sales (24)
   :                    :     :                             :                                      :     +- ReusedExchange (27)
   :                    :     :                             :                                      +- BroadcastExchange (33)
   :                    :     :                             :                                         +- * Filter (32)
   :                    :     :                             :                                            +- * ColumnarToRow (31)
   :                    :     :                             :                                               +- Scan parquet default.item (30)
   :                    :     :                             +- * Sort (57)
   :                    :     :                                +- Exchange (56)
   :                    :     :                                   +- * Project (55)
   :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (54)
   :                    :     :                                         :- * Project (52)
   :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (51)
   :                    :     :                                         :     :- * Filter (49)
   :                    :     :                                         :     :  +- * ColumnarToRow (48)
   :                    :     :                                         :     :     +- Scan parquet default.web_sales (47)
   :                    :     :                                         :     +- ReusedExchange (50)
   :                    :     :                                         +- ReusedExchange (53)
   :                    :     +- BroadcastExchange (72)
   :                    :        +- * Project (71)
   :                    :           +- * Filter (70)
   :                    :              +- * ColumnarToRow (69)
   :                    :                 +- Scan parquet default.date_dim (68)
   :                    +- BroadcastExchange (83)
   :                       +- SortMergeJoin LeftSemi (82)
   :                          :- * Sort (79)
   :                          :  +- Exchange (78)
   :                          :     +- * Filter (77)
   :                          :        +- * ColumnarToRow (76)
   :                          :           +- Scan parquet default.item (75)
   :                          +- * Sort (81)
   :                             +- ReusedExchange (80)
   +- BroadcastExchange (114)
      +- * Project (113)
         +- * Filter (112)
            +- * HashAggregate (111)
               +- Exchange (110)
                  +- * HashAggregate (109)
                     +- * Project (108)
                        +- * BroadcastHashJoin Inner BuildRight (107)
                           :- * Project (105)
                           :  +- * BroadcastHashJoin Inner BuildRight (104)
                           :     :- SortMergeJoin LeftSemi (98)
                           :     :  :- * Sort (95)
                           :     :  :  +- Exchange (94)
                           :     :  :     +- * Filter (93)
                           :     :  :        +- * ColumnarToRow (92)
                           :     :  :           +- Scan parquet default.store_sales (91)
                           :     :  +- * Sort (97)
                           :     :     +- ReusedExchange (96)
                           :     +- BroadcastExchange (103)
                           :        +- * Project (102)
                           :           +- * Filter (101)
                           :              +- * ColumnarToRow (100)
                           :                 +- Scan parquet default.date_dim (99)
                           +- ReusedExchange (106)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 10]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(11) Filter [codegen id : 10]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(16) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(17) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(18) Project [codegen id : 10]
Output [1]: [ss_item_sk#1]
Input [3]: [ss_item_sk#1, ss_sold_date_sk#4, d_date_sk#12]

(19) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(22) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(23) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(24) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(25) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(26) Filter [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(27) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#22]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(29) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(30) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(31) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(33) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(36) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(37) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(38) SortMergeJoin
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(39) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(40) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#15]
Join condition: None

(41) Project [codegen id : 10]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#1, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(42) HashAggregate [codegen id : 10]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(43) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(44) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(45) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(46) Sort [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(47) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(48) ColumnarToRow [codegen id : 15]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(49) Filter [codegen id : 15]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_item_sk#35)

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#37]

(51) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(52) Project [codegen id : 15]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(53) ReusedExchange [Reuses operator id: 33]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(54) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(55) Project [codegen id : 15]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(56) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(57) Sort [codegen id : 16]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(58) SortMergeJoin
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(59) HashAggregate [codegen id : 17]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(60) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#43]

(61) HashAggregate [codegen id : 18]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(62) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#44]

(63) BroadcastHashJoin [codegen id : 19]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(64) Project [codegen id : 19]
Output [1]: [i_item_sk#7 AS ss_item_sk#45]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(65) Exchange
Input [1]: [ss_item_sk#45]
Arguments: hashpartitioning(ss_item_sk#45, 5), ENSURE_REQUIREMENTS, [id=#46]

(66) Sort [codegen id : 20]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(67) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(68) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_week_seq#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(69) ColumnarToRow [codegen id : 21]
Input [2]: [d_date_sk#12, d_week_seq#47]

(70) Filter [codegen id : 21]
Input [2]: [d_date_sk#12, d_week_seq#47]
Condition : ((isnotnull(d_week_seq#47) AND (d_week_seq#47 = Subquery scalar-subquery#48, [id=#49])) AND isnotnull(d_date_sk#12))

(71) Project [codegen id : 21]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_week_seq#47]

(72) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50]

(73) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(74) Project [codegen id : 42]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(75) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(76) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(77) Filter [codegen id : 22]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(78) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#51]

(79) Sort [codegen id : 23]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(80) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#45]

(81) Sort [codegen id : 41]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(82) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(83) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52]

(84) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(85) Project [codegen id : 42]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(86) HashAggregate [codegen id : 42]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#53, isEmpty#54, count#55]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#56, isEmpty#57, count#58]

(87) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#56, isEmpty#57, count#58]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#59]

(88) HashAggregate [codegen id : 86]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#56, isEmpty#57, count#58]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60, count(1)#61]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60 AS sales#62, count(1)#61 AS number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#64]

(89) Filter [codegen id : 86]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#64]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#64) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#64 as decimal(32,6)) > cast(Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(90) Project [codegen id : 86]
Output [6]: [store AS channel#67, i_brand_id#8, i_class_id#9, i_category_id#10, sales#62, number_sales#63]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#62, number_sales#63, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#64]

(91) Scan parquet default.store_sales
Output [4]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#71), dynamicpruningexpression(ss_sold_date_sk#71 IN dynamicpruning#72)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 43]
Input [4]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71]

(93) Filter [codegen id : 43]
Input [4]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71]
Condition : isnotnull(ss_item_sk#68)

(94) Exchange
Input [4]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71]
Arguments: hashpartitioning(ss_item_sk#68, 5), ENSURE_REQUIREMENTS, [id=#73]

(95) Sort [codegen id : 44]
Input [4]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71]
Arguments: [ss_item_sk#68 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#45]

(97) Sort [codegen id : 62]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(98) SortMergeJoin
Left keys [1]: [ss_item_sk#68]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(99) Scan parquet default.date_dim
Output [2]: [d_date_sk#74, d_week_seq#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(100) ColumnarToRow [codegen id : 63]
Input [2]: [d_date_sk#74, d_week_seq#75]

(101) Filter [codegen id : 63]
Input [2]: [d_date_sk#74, d_week_seq#75]
Condition : ((isnotnull(d_week_seq#75) AND (d_week_seq#75 = Subquery scalar-subquery#76, [id=#77])) AND isnotnull(d_date_sk#74))

(102) Project [codegen id : 63]
Output [1]: [d_date_sk#74]
Input [2]: [d_date_sk#74, d_week_seq#75]

(103) BroadcastExchange
Input [1]: [d_date_sk#74]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#78]

(104) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [ss_sold_date_sk#71]
Right keys [1]: [d_date_sk#74]
Join condition: None

(105) Project [codegen id : 84]
Output [3]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70]
Input [5]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71, d_date_sk#74]

(106) ReusedExchange [Reuses operator id: 83]
Output [4]: [i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(107) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [ss_item_sk#68]
Right keys [1]: [i_item_sk#79]
Join condition: None

(108) Project [codegen id : 84]
Output [5]: [ss_quantity#69, ss_list_price#70, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [7]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(109) HashAggregate [codegen id : 84]
Input [5]: [ss_quantity#69, ss_list_price#70, i_brand_id#80, i_class_id#81, i_category_id#82]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]

(110) Exchange
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#80, i_class_id#81, i_category_id#82, 5), ENSURE_REQUIREMENTS, [id=#89]

(111) HashAggregate [codegen id : 85]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#90, count(1)#91]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sales#92, count(1)#91 AS number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#94]

(112) Filter [codegen id : 85]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#94]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#94) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#94 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(113) Project [codegen id : 85]
Output [6]: [store AS channel#95, i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#94]

(114) BroadcastExchange
Input [6]: [channel#95, i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#96]

(115) BroadcastHashJoin [codegen id : 86]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Join condition: None

(116) TakeOrderedAndProject
Input [12]: [channel#67, i_brand_id#8, i_class_id#9, i_category_id#10, sales#62, number_sales#63, channel#95, i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93]
Arguments: 100, [i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST], [channel#67, i_brand_id#8, i_class_id#9, i_category_id#10, sales#62, number_sales#63, channel#95, i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93]

===== Subqueries =====

Subquery:1 Hosting operator id = 89 Hosting Expression = Subquery scalar-subquery#65, [id=#66]
* HashAggregate (139)
+- Exchange (138)
   +- * HashAggregate (137)
      +- Union (136)
         :- * Project (125)
         :  +- * BroadcastHashJoin Inner BuildRight (124)
         :     :- * ColumnarToRow (118)
         :     :  +- Scan parquet default.store_sales (117)
         :     +- BroadcastExchange (123)
         :        +- * Project (122)
         :           +- * Filter (121)
         :              +- * ColumnarToRow (120)
         :                 +- Scan parquet default.date_dim (119)
         :- * Project (130)
         :  +- * BroadcastHashJoin Inner BuildRight (129)
         :     :- * ColumnarToRow (127)
         :     :  +- Scan parquet default.catalog_sales (126)
         :     +- ReusedExchange (128)
         +- * Project (135)
            +- * BroadcastHashJoin Inner BuildRight (134)
               :- * ColumnarToRow (132)
               :  +- Scan parquet default.web_sales (131)
               +- ReusedExchange (133)


(117) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#97)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(118) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(119) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(120) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(121) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(122) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(123) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98]

(124) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(125) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#99, ss_list_price#3 AS list_price#100]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(126) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#101, cs_list_price#102, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#97)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(127) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#101, cs_list_price#102, cs_sold_date_sk#21]

(128) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#103]

(129) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#103]
Join condition: None

(130) Project [codegen id : 4]
Output [2]: [cs_quantity#101 AS quantity#104, cs_list_price#102 AS list_price#105]
Input [4]: [cs_quantity#101, cs_list_price#102, cs_sold_date_sk#21, d_date_sk#103]

(131) Scan parquet default.web_sales
Output [3]: [ws_quantity#106, ws_list_price#107, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#97)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#106, ws_list_price#107, ws_sold_date_sk#36]

(133) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#108]

(134) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#108]
Join condition: None

(135) Project [codegen id : 6]
Output [2]: [ws_quantity#106 AS quantity#109, ws_list_price#107 AS list_price#110]
Input [4]: [ws_quantity#106, ws_list_price#107, ws_sold_date_sk#36, d_date_sk#108]

(136) Union

(137) HashAggregate [codegen id : 7]
Input [2]: [quantity#99, list_price#100]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#99 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#100 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#111, count#112]
Results [2]: [sum#113, count#114]

(138) Exchange
Input [2]: [sum#113, count#114]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#115]

(139) HashAggregate [codegen id : 8]
Input [2]: [sum#113, count#114]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#99 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#100 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#99 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#100 as decimal(12,2)))), DecimalType(18,2), true))#116]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#99 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#100 as decimal(12,2)))), DecimalType(18,2), true))#116 AS average_sales#117]

Subquery:2 Hosting operator id = 117 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#97
ReusedExchange (140)


(140) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#12]

Subquery:3 Hosting operator id = 126 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#97

Subquery:4 Hosting operator id = 131 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#97

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (141)


(141) ReusedExchange [Reuses operator id: 72]
Output [1]: [d_date_sk#12]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#11
ReusedExchange (142)


(142) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

Subquery:7 Hosting operator id = 24 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#11

Subquery:8 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#11

Subquery:9 Hosting operator id = 70 Hosting Expression = Subquery scalar-subquery#48, [id=#49]
* Project (146)
+- * Filter (145)
   +- * ColumnarToRow (144)
      +- Scan parquet default.date_dim (143)


(143) Scan parquet default.date_dim
Output [4]: [d_week_seq#47, d_year#13, d_moy#118, d_dom#119]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(144) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#47, d_year#13, d_moy#118, d_dom#119]

(145) Filter [codegen id : 1]
Input [4]: [d_week_seq#47, d_year#13, d_moy#118, d_dom#119]
Condition : (((((isnotnull(d_year#13) AND isnotnull(d_moy#118)) AND isnotnull(d_dom#119)) AND (d_year#13 = 2000)) AND (d_moy#118 = 12)) AND (d_dom#119 = 11))

(146) Project [codegen id : 1]
Output [1]: [d_week_seq#47]
Input [4]: [d_week_seq#47, d_year#13, d_moy#118, d_dom#119]

Subquery:10 Hosting operator id = 112 Hosting Expression = ReusedSubquery Subquery scalar-subquery#65, [id=#66]

Subquery:11 Hosting operator id = 91 Hosting Expression = ss_sold_date_sk#71 IN dynamicpruning#72
ReusedExchange (147)


(147) ReusedExchange [Reuses operator id: 103]
Output [1]: [d_date_sk#74]

Subquery:12 Hosting operator id = 101 Hosting Expression = Subquery scalar-subquery#76, [id=#77]
* Project (151)
+- * Filter (150)
   +- * ColumnarToRow (149)
      +- Scan parquet default.date_dim (148)


(148) Scan parquet default.date_dim
Output [4]: [d_week_seq#47, d_year#13, d_moy#118, d_dom#119]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(149) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#47, d_year#13, d_moy#118, d_dom#119]

(150) Filter [codegen id : 1]
Input [4]: [d_week_seq#47, d_year#13, d_moy#118, d_dom#119]
Condition : (((((isnotnull(d_year#13) AND isnotnull(d_moy#118)) AND isnotnull(d_dom#119)) AND (d_year#13 = 1999)) AND (d_moy#118 = 12)) AND (d_dom#119 = 11))

(151) Project [codegen id : 1]
Output [1]: [d_week_seq#47]
Input [4]: [d_week_seq#47, d_year#13, d_moy#118, d_dom#119]


