== Physical Plan ==
TakeOrderedAndProject (115)
+- * HashAggregate (114)
   +- Exchange (113)
      +- * HashAggregate (112)
         +- * Expand (111)
            +- Union (110)
               :- * Project (77)
               :  +- * Filter (76)
               :     +- * HashAggregate (75)
               :        +- Exchange (74)
               :           +- * HashAggregate (73)
               :              +- * Project (72)
               :                 +- * BroadcastHashJoin Inner BuildRight (71)
               :                    :- * Project (65)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (64)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
               :                    :     :  :- * Filter (3)
               :                    :     :  :  +- * ColumnarToRow (2)
               :                    :     :  :     +- Scan parquet default.store_sales (1)
               :                    :     :  +- BroadcastExchange (56)
               :                    :     :     +- * Project (55)
               :                    :     :        +- * BroadcastHashJoin Inner BuildRight (54)
               :                    :     :           :- * Filter (6)
               :                    :     :           :  +- * ColumnarToRow (5)
               :                    :     :           :     +- Scan parquet default.item (4)
               :                    :     :           +- BroadcastExchange (53)
               :                    :     :              +- * HashAggregate (52)
               :                    :     :                 +- * HashAggregate (51)
               :                    :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (50)
               :                    :     :                       :- * HashAggregate (39)
               :                    :     :                       :  +- Exchange (38)
               :                    :     :                       :     +- * HashAggregate (37)
               :                    :     :                       :        +- * Project (36)
               :                    :     :                       :           +- * BroadcastHashJoin Inner BuildRight (35)
               :                    :     :                       :              :- * Project (33)
               :                    :     :                       :              :  +- * BroadcastHashJoin Inner BuildRight (32)
               :                    :     :                       :              :     :- * Filter (9)
               :                    :     :                       :              :     :  +- * ColumnarToRow (8)
               :                    :     :                       :              :     :     +- Scan parquet default.store_sales (7)
               :                    :     :                       :              :     +- BroadcastExchange (31)
               :                    :     :                       :              :        +- * BroadcastHashJoin LeftSemi BuildRight (30)
               :                    :     :                       :              :           :- * Filter (12)
               :                    :     :                       :              :           :  +- * ColumnarToRow (11)
               :                    :     :                       :              :           :     +- Scan parquet default.item (10)
               :                    :     :                       :              :           +- BroadcastExchange (29)
               :                    :     :                       :              :              +- * Project (28)
               :                    :     :                       :              :                 +- * BroadcastHashJoin Inner BuildRight (27)
               :                    :     :                       :              :                    :- * Project (21)
               :                    :     :                       :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
               :                    :     :                       :              :                    :     :- * Filter (15)
               :                    :     :                       :              :                    :     :  +- * ColumnarToRow (14)
               :                    :     :                       :              :                    :     :     +- Scan parquet default.catalog_sales (13)
               :                    :     :                       :              :                    :     +- BroadcastExchange (19)
               :                    :     :                       :              :                    :        +- * Filter (18)
               :                    :     :                       :              :                    :           +- * ColumnarToRow (17)
               :                    :     :                       :              :                    :              +- Scan parquet default.item (16)
               :                    :     :                       :              :                    +- BroadcastExchange (26)
               :                    :     :                       :              :                       +- * Project (25)
               :                    :     :                       :              :                          +- * Filter (24)
               :                    :     :                       :              :                             +- * ColumnarToRow (23)
               :                    :     :                       :              :                                +- Scan parquet default.date_dim (22)
               :                    :     :                       :              +- ReusedExchange (34)
               :                    :     :                       +- BroadcastExchange (49)
               :                    :     :                          +- * Project (48)
               :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (47)
               :                    :     :                                :- * Project (45)
               :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (44)
               :                    :     :                                :     :- * Filter (42)
               :                    :     :                                :     :  +- * ColumnarToRow (41)
               :                    :     :                                :     :     +- Scan parquet default.web_sales (40)
               :                    :     :                                :     +- ReusedExchange (43)
               :                    :     :                                +- ReusedExchange (46)
               :                    :     +- BroadcastExchange (63)
               :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
               :                    :           :- * Filter (60)
               :                    :           :  +- * ColumnarToRow (59)
               :                    :           :     +- Scan parquet default.item (58)
               :                    :           +- ReusedExchange (61)
               :                    +- BroadcastExchange (70)
               :                       +- * Project (69)
               :                          +- * Filter (68)
               :                             +- * ColumnarToRow (67)
               :                                +- Scan parquet default.date_dim (66)
               :- * Project (93)
               :  +- * Filter (92)
               :     +- * HashAggregate (91)
               :        +- Exchange (90)
               :           +- * HashAggregate (89)
               :              +- * Project (88)
               :                 +- * BroadcastHashJoin Inner BuildRight (87)
               :                    :- * Project (85)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (84)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (82)
               :                    :     :  :- * Filter (80)
               :                    :     :  :  +- * ColumnarToRow (79)
               :                    :     :  :     +- Scan parquet default.catalog_sales (78)
               :                    :     :  +- ReusedExchange (81)
               :                    :     +- ReusedExchange (83)
               :                    +- ReusedExchange (86)
               +- * Project (109)
                  +- * Filter (108)
                     +- * HashAggregate (107)
                        +- Exchange (106)
                           +- * HashAggregate (105)
                              +- * Project (104)
                                 +- * BroadcastHashJoin Inner BuildRight (103)
                                    :- * Project (101)
                                    :  +- * BroadcastHashJoin Inner BuildRight (100)
                                    :     :- * BroadcastHashJoin LeftSemi BuildRight (98)
                                    :     :  :- * Filter (96)
                                    :     :  :  +- * ColumnarToRow (95)
                                    :     :  :     +- Scan parquet default.web_sales (94)
                                    :     :  +- ReusedExchange (97)
                                    :     +- ReusedExchange (99)
                                    +- ReusedExchange (102)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) Scan parquet default.item
Output [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Condition : (((isnotnull(i_item_sk#11) AND isnotnull(i_brand_id#12)) AND isnotnull(i_class_id#13)) AND isnotnull(i_category_id#14))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(16) Scan parquet default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : isnotnull(i_item_sk#17)

(19) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#17]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#16, i_brand_id#18, i_class_id#19, i_category_id#20]
Input [6]: [cs_item_sk#15, cs_sold_date_sk#16, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(22) Scan parquet default.date_dim
Output [2]: [d_date_sk#22, d_year#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(23) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#22, d_year#23]

(24) Filter [codegen id : 2]
Input [2]: [d_date_sk#22, d_year#23]
Condition : (((isnotnull(d_year#23) AND (d_year#23 >= 1999)) AND (d_year#23 <= 2001)) AND isnotnull(d_date_sk#22))

(25) Project [codegen id : 2]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_year#23]

(26) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(27) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#22]
Join condition: None

(28) Project [codegen id : 3]
Output [3]: [i_brand_id#18, i_class_id#19, i_category_id#20]
Input [5]: [cs_sold_date_sk#16, i_brand_id#18, i_class_id#19, i_category_id#20, d_date_sk#22]

(29) BroadcastExchange
Input [3]: [i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(30) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#12, 0), isnull(i_brand_id#12), coalesce(i_class_id#13, 0), isnull(i_class_id#13), coalesce(i_category_id#14, 0), isnull(i_category_id#14)]
Right keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Join condition: None

(31) BroadcastExchange
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#11]
Join condition: None

(33) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#4, i_brand_id#12, i_class_id#13, i_category_id#14]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(34) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#27]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(36) Project [codegen id : 6]
Output [3]: [i_brand_id#12 AS brand_id#28, i_class_id#13 AS class_id#29, i_category_id#14 AS category_id#30]
Input [5]: [ss_sold_date_sk#4, i_brand_id#12, i_class_id#13, i_category_id#14, d_date_sk#27]

(37) HashAggregate [codegen id : 6]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(38) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(39) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(40) Scan parquet default.web_sales
Output [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(41) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]

(42) Filter [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(43) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(44) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#34]
Join condition: None

(45) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [6]: [ws_item_sk#32, ws_sold_date_sk#33, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(46) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#38]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#38]
Join condition: None

(48) Project [codegen id : 9]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]

(49) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(51) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(52) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(53) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#40]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join condition: None

(55) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#41]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(56) BroadcastExchange
Input [1]: [ss_item_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(57) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(58) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(59) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(60) Filter [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(61) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#41]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(63) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#43]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(65) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(66) Scan parquet default.date_dim
Output [3]: [d_date_sk#27, d_year#44, d_moy#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(67) ColumnarToRow [codegen id : 24]
Input [3]: [d_date_sk#27, d_year#44, d_moy#45]

(68) Filter [codegen id : 24]
Input [3]: [d_date_sk#27, d_year#44, d_moy#45]
Condition : ((((isnotnull(d_year#44) AND isnotnull(d_moy#45)) AND (d_year#44 = 2001)) AND (d_moy#45 = 11)) AND isnotnull(d_date_sk#27))

(69) Project [codegen id : 24]
Output [1]: [d_date_sk#27]
Input [3]: [d_date_sk#27, d_year#44, d_moy#45]

(70) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#46]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(72) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#27]

(73) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#47, isEmpty#48, count#49]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#50, isEmpty#51, count#52]

(74) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#50, isEmpty#51, count#52]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#53]

(75) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#50, isEmpty#51, count#52]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#54, count(1)#55]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sales#56, count(1)#55 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58]

(76) Filter [codegen id : 26]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58 as decimal(32,6)) > cast(Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(77) Project [codegen id : 26]
Output [6]: [sales#56, number_sales#57, store AS channel#61, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58]

(78) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#15, cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#15, cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]

(80) Filter [codegen id : 51]
Input [4]: [cs_item_sk#15, cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(81) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#41]

(82) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(83) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67]

(84) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#64]
Join condition: None

(85) Project [codegen id : 51]
Output [6]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16, i_brand_id#65, i_class_id#66, i_category_id#67]
Input [8]: [cs_item_sk#15, cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16, i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67]

(86) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#68]

(87) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#68]
Join condition: None

(88) Project [codegen id : 51]
Output [5]: [cs_quantity#62, cs_list_price#63, i_brand_id#65, i_class_id#66, i_category_id#67]
Input [7]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16, i_brand_id#65, i_class_id#66, i_category_id#67, d_date_sk#68]

(89) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#62, cs_list_price#63, i_brand_id#65, i_class_id#66, i_category_id#67]
Keys [3]: [i_brand_id#65, i_class_id#66, i_category_id#67]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#69, isEmpty#70, count#71]
Results [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum#72, isEmpty#73, count#74]

(90) Exchange
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum#72, isEmpty#73, count#74]
Arguments: hashpartitioning(i_brand_id#65, i_class_id#66, i_category_id#67, 5), ENSURE_REQUIREMENTS, [id=#75]

(91) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum#72, isEmpty#73, count#74]
Keys [3]: [i_brand_id#65, i_class_id#66, i_category_id#67]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#76, count(1)#77]
Results [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sales#78, count(1)#77 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80]

(92) Filter [codegen id : 52]
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(93) Project [codegen id : 52]
Output [6]: [sales#78, number_sales#79, catalog AS channel#81, i_brand_id#65, i_class_id#66, i_category_id#67]
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80]

(94) Scan parquet default.web_sales
Output [4]: [ws_item_sk#32, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#32, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]

(96) Filter [codegen id : 77]
Input [4]: [ws_item_sk#32, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(97) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#41]

(98) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(99) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#84, i_brand_id#85, i_class_id#86, i_category_id#87]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#84]
Join condition: None

(101) Project [codegen id : 77]
Output [6]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33, i_brand_id#85, i_class_id#86, i_category_id#87]
Input [8]: [ws_item_sk#32, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33, i_item_sk#84, i_brand_id#85, i_class_id#86, i_category_id#87]

(102) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#88]

(103) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#88]
Join condition: None

(104) Project [codegen id : 77]
Output [5]: [ws_quantity#82, ws_list_price#83, i_brand_id#85, i_class_id#86, i_category_id#87]
Input [7]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33, i_brand_id#85, i_class_id#86, i_category_id#87, d_date_sk#88]

(105) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#82, ws_list_price#83, i_brand_id#85, i_class_id#86, i_category_id#87]
Keys [3]: [i_brand_id#85, i_class_id#86, i_category_id#87]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#89, isEmpty#90, count#91]
Results [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum#92, isEmpty#93, count#94]

(106) Exchange
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum#92, isEmpty#93, count#94]
Arguments: hashpartitioning(i_brand_id#85, i_class_id#86, i_category_id#87, 5), ENSURE_REQUIREMENTS, [id=#95]

(107) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum#92, isEmpty#93, count#94]
Keys [3]: [i_brand_id#85, i_class_id#86, i_category_id#87]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#96, count(1)#97]
Results [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#96 AS sales#98, count(1)#97 AS number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#96 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100]

(108) Filter [codegen id : 78]
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(109) Project [codegen id : 78]
Output [6]: [sales#98, number_sales#99, web AS channel#101, i_brand_id#85, i_class_id#86, i_category_id#87]
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100]

(110) Union

(111) Expand [codegen id : 79]
Input [6]: [sales#56, number_sales#57, channel#61, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [List(sales#56, number_sales#57, channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, 0), List(sales#56, number_sales#57, channel#61, i_brand_id#7, i_class_id#8, null, 1), List(sales#56, number_sales#57, channel#61, i_brand_id#7, null, null, 3), List(sales#56, number_sales#57, channel#61, null, null, null, 7), List(sales#56, number_sales#57, null, null, null, null, 15)], [sales#56, number_sales#57, channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106]

(112) HashAggregate [codegen id : 79]
Input [7]: [sales#56, number_sales#57, channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106]
Keys [5]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106]
Functions [2]: [partial_sum(sales#56), partial_sum(number_sales#57)]
Aggregate Attributes [3]: [sum#107, isEmpty#108, sum#109]
Results [8]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106, sum#110, isEmpty#111, sum#112]

(113) Exchange
Input [8]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106, sum#110, isEmpty#111, sum#112]
Arguments: hashpartitioning(channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106, 5), ENSURE_REQUIREMENTS, [id=#113]

(114) HashAggregate [codegen id : 80]
Input [8]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106, sum#110, isEmpty#111, sum#112]
Keys [5]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106]
Functions [2]: [sum(sales#56), sum(number_sales#57)]
Aggregate Attributes [2]: [sum(sales#56)#114, sum(number_sales#57)#115]
Results [6]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, sum(sales#56)#114 AS sum(sales)#116, sum(number_sales#57)#115 AS sum(number_sales)#117]

(115) TakeOrderedAndProject
Input [6]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, sum(sales)#116, sum(number_sales)#117]
Arguments: 100, [channel#102 ASC NULLS FIRST, i_brand_id#103 ASC NULLS FIRST, i_class_id#104 ASC NULLS FIRST, i_category_id#105 ASC NULLS FIRST], [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, sum(sales)#116, sum(number_sales)#117]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#59, [id=#60]
* HashAggregate (138)
+- Exchange (137)
   +- * HashAggregate (136)
      +- Union (135)
         :- * Project (124)
         :  +- * BroadcastHashJoin Inner BuildRight (123)
         :     :- * ColumnarToRow (117)
         :     :  +- Scan parquet default.store_sales (116)
         :     +- BroadcastExchange (122)
         :        +- * Project (121)
         :           +- * Filter (120)
         :              +- * ColumnarToRow (119)
         :                 +- Scan parquet default.date_dim (118)
         :- * Project (129)
         :  +- * BroadcastHashJoin Inner BuildRight (128)
         :     :- * ColumnarToRow (126)
         :     :  +- Scan parquet default.catalog_sales (125)
         :     +- ReusedExchange (127)
         +- * Project (134)
            +- * BroadcastHashJoin Inner BuildRight (133)
               :- * ColumnarToRow (131)
               :  +- Scan parquet default.web_sales (130)
               +- ReusedExchange (132)


(116) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#118)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(117) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(118) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_year#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(119) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#44]

(120) Filter [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#44]
Condition : (((isnotnull(d_year#44) AND (d_year#44 >= 1999)) AND (d_year#44 <= 2001)) AND isnotnull(d_date_sk#27))

(121) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_year#44]

(122) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#119]

(123) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(124) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#120, ss_list_price#3 AS list_price#121]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#27]

(125) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#118)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(126) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]

(127) ReusedExchange [Reuses operator id: 122]
Output [1]: [d_date_sk#122]

(128) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#122]
Join condition: None

(129) Project [codegen id : 4]
Output [2]: [cs_quantity#62 AS quantity#123, cs_list_price#63 AS list_price#124]
Input [4]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16, d_date_sk#122]

(130) Scan parquet default.web_sales
Output [3]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#118)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(131) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]

(132) ReusedExchange [Reuses operator id: 122]
Output [1]: [d_date_sk#125]

(133) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#125]
Join condition: None

(134) Project [codegen id : 6]
Output [2]: [ws_quantity#82 AS quantity#126, ws_list_price#83 AS list_price#127]
Input [4]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33, d_date_sk#125]

(135) Union

(136) HashAggregate [codegen id : 7]
Input [2]: [quantity#120, list_price#121]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#120 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#121 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#128, count#129]
Results [2]: [sum#130, count#131]

(137) Exchange
Input [2]: [sum#130, count#131]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#132]

(138) HashAggregate [codegen id : 8]
Input [2]: [sum#130, count#131]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#120 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#121 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#120 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#121 as decimal(12,2)))), DecimalType(18,2), true))#133]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#120 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#121 as decimal(12,2)))), DecimalType(18,2), true))#133 AS average_sales#134]

Subquery:2 Hosting operator id = 116 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#118
ReusedExchange (139)


(139) ReusedExchange [Reuses operator id: 122]
Output [1]: [d_date_sk#27]

Subquery:3 Hosting operator id = 125 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#118

Subquery:4 Hosting operator id = 130 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#118

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (140)


(140) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#27]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
ReusedExchange (141)


(141) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#27]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:8 Hosting operator id = 40 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#10

Subquery:9 Hosting operator id = 92 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:10 Hosting operator id = 78 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#5

Subquery:11 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:12 Hosting operator id = 94 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#5


