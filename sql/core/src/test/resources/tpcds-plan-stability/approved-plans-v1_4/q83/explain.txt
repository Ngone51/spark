== Physical Plan ==
TakeOrderedAndProject (72)
+- * Project (71)
   +- * BroadcastHashJoin Inner BuildRight (70)
      :- * Project (56)
      :  +- * BroadcastHashJoin Inner BuildRight (55)
      :     :- * HashAggregate (30)
      :     :  +- Exchange (29)
      :     :     +- * HashAggregate (28)
      :     :        +- * Project (27)
      :     :           +- * BroadcastHashJoin Inner BuildRight (26)
      :     :              :- * Project (9)
      :     :              :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :              :     :- * Filter (3)
      :     :              :     :  +- * ColumnarToRow (2)
      :     :              :     :     +- Scan parquet default.store_returns (1)
      :     :              :     +- BroadcastExchange (7)
      :     :              :        +- * Filter (6)
      :     :              :           +- * ColumnarToRow (5)
      :     :              :              +- Scan parquet default.item (4)
      :     :              +- BroadcastExchange (25)
      :     :                 +- * Project (24)
      :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (23)
      :     :                       :- * Filter (12)
      :     :                       :  +- * ColumnarToRow (11)
      :     :                       :     +- Scan parquet default.date_dim (10)
      :     :                       +- BroadcastExchange (22)
      :     :                          +- * Project (21)
      :     :                             +- * BroadcastHashJoin LeftSemi BuildRight (20)
      :     :                                :- * ColumnarToRow (14)
      :     :                                :  +- Scan parquet default.date_dim (13)
      :     :                                +- BroadcastExchange (19)
      :     :                                   +- * Project (18)
      :     :                                      +- * Filter (17)
      :     :                                         +- * ColumnarToRow (16)
      :     :                                            +- Scan parquet default.date_dim (15)
      :     +- BroadcastExchange (54)
      :        +- * HashAggregate (53)
      :           +- Exchange (52)
      :              +- * HashAggregate (51)
      :                 +- * Project (50)
      :                    +- * BroadcastHashJoin Inner BuildRight (49)
      :                       :- * Project (36)
      :                       :  +- * BroadcastHashJoin Inner BuildRight (35)
      :                       :     :- * Filter (33)
      :                       :     :  +- * ColumnarToRow (32)
      :                       :     :     +- Scan parquet default.catalog_returns (31)
      :                       :     +- ReusedExchange (34)
      :                       +- BroadcastExchange (48)
      :                          +- * Project (47)
      :                             +- * BroadcastHashJoin LeftSemi BuildRight (46)
      :                                :- * Filter (39)
      :                                :  +- * ColumnarToRow (38)
      :                                :     +- Scan parquet default.date_dim (37)
      :                                +- BroadcastExchange (45)
      :                                   +- * Project (44)
      :                                      +- * BroadcastHashJoin LeftSemi BuildRight (43)
      :                                         :- * ColumnarToRow (41)
      :                                         :  +- Scan parquet default.date_dim (40)
      :                                         +- ReusedExchange (42)
      +- BroadcastExchange (69)
         +- * HashAggregate (68)
            +- Exchange (67)
               +- * HashAggregate (66)
                  +- * Project (65)
                     +- * BroadcastHashJoin Inner BuildRight (64)
                        :- * Project (62)
                        :  +- * BroadcastHashJoin Inner BuildRight (61)
                        :     :- * Filter (59)
                        :     :  +- * ColumnarToRow (58)
                        :     :     +- Scan parquet default.web_returns (57)
                        :     +- ReusedExchange (60)
                        +- ReusedExchange (63)


(1) Scan parquet default.store_returns
Output [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#3), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_return_quantity:int>

(2) ColumnarToRow [codegen id : 5]
Input [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]

(3) Filter [codegen id : 5]
Input [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]
Condition : isnotnull(sr_item_sk#1)

(4) Scan parquet default.item
Output [2]: [i_item_sk#4, i_item_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#4, i_item_id#5]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(i_item_id#5))

(7) BroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#6]

(8) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_item_sk#1]
Right keys [1]: [cast(i_item_sk#4 as bigint)]
Join condition: None

(9) Project [codegen id : 5]
Output [3]: [sr_return_quantity#2, sr_returned_date_sk#3, i_item_id#5]
Input [5]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3, i_item_sk#4, i_item_id#5]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(11) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#7, d_date#8]

(12) Filter [codegen id : 4]
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(13) Scan parquet default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [d_date#8, d_week_seq#9]

(15) Scan parquet default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(16) ColumnarToRow [codegen id : 2]
Input [2]: [d_date#8, d_week_seq#9]

(17) Filter [codegen id : 2]
Input [2]: [d_date#8, d_week_seq#9]
Condition : cast(d_date#8 as string) IN (2000-06-30,2000-09-27,2000-11-17)

(18) Project [codegen id : 2]
Output [1]: [d_week_seq#9 AS d_week_seq#9#10]
Input [2]: [d_date#8, d_week_seq#9]

(19) BroadcastExchange
Input [1]: [d_week_seq#9#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_week_seq#9]
Right keys [1]: [d_week_seq#9#10]
Join condition: None

(21) Project [codegen id : 3]
Output [1]: [d_date#8 AS d_date#8#12]
Input [2]: [d_date#8, d_week_seq#9]

(22) BroadcastExchange
Input [1]: [d_date#8#12]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#13]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [d_date#8]
Right keys [1]: [d_date#8#12]
Join condition: None

(24) Project [codegen id : 4]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_date#8]

(25) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(26) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_returned_date_sk#3]
Right keys [1]: [cast(d_date_sk#7 as bigint)]
Join condition: None

(27) Project [codegen id : 5]
Output [2]: [sr_return_quantity#2, i_item_id#5]
Input [4]: [sr_return_quantity#2, sr_returned_date_sk#3, i_item_id#5, d_date_sk#7]

(28) HashAggregate [codegen id : 5]
Input [2]: [sr_return_quantity#2, i_item_id#5]
Keys [1]: [i_item_id#5]
Functions [1]: [partial_sum(sr_return_quantity#2)]
Aggregate Attributes [1]: [sum#15]
Results [2]: [i_item_id#5, sum#16]

(29) Exchange
Input [2]: [i_item_id#5, sum#16]
Arguments: hashpartitioning(i_item_id#5, 5), ENSURE_REQUIREMENTS, [id=#17]

(30) HashAggregate [codegen id : 18]
Input [2]: [i_item_id#5, sum#16]
Keys [1]: [i_item_id#5]
Functions [1]: [sum(sr_return_quantity#2)]
Aggregate Attributes [1]: [sum(sr_return_quantity#2)#18]
Results [2]: [i_item_id#5 AS item_id#19, sum(sr_return_quantity#2)#18 AS sr_item_qty#20]

(31) Scan parquet default.catalog_returns
Output [3]: [cr_item_sk#21, cr_return_quantity#22, cr_returned_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#23), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_return_quantity:int>

(32) ColumnarToRow [codegen id : 10]
Input [3]: [cr_item_sk#21, cr_return_quantity#22, cr_returned_date_sk#23]

(33) Filter [codegen id : 10]
Input [3]: [cr_item_sk#21, cr_return_quantity#22, cr_returned_date_sk#23]
Condition : isnotnull(cr_item_sk#21)

(34) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#24, i_item_id#25]

(35) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_item_sk#21]
Right keys [1]: [i_item_sk#24]
Join condition: None

(36) Project [codegen id : 10]
Output [3]: [cr_return_quantity#22, cr_returned_date_sk#23, i_item_id#25]
Input [5]: [cr_item_sk#21, cr_return_quantity#22, cr_returned_date_sk#23, i_item_sk#24, i_item_id#25]

(37) Scan parquet default.date_dim
Output [2]: [d_date_sk#26, d_date#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(38) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#26, d_date#27]

(39) Filter [codegen id : 9]
Input [2]: [d_date_sk#26, d_date#27]
Condition : isnotnull(d_date_sk#26)

(40) Scan parquet default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(41) ColumnarToRow [codegen id : 8]
Input [2]: [d_date#8, d_week_seq#9]

(42) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_week_seq#9#28]

(43) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [d_week_seq#9]
Right keys [1]: [d_week_seq#9#28]
Join condition: None

(44) Project [codegen id : 8]
Output [1]: [d_date#8]
Input [2]: [d_date#8, d_week_seq#9]

(45) BroadcastExchange
Input [1]: [d_date#8]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#29]

(46) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [d_date#27]
Right keys [1]: [d_date#8]
Join condition: None

(47) Project [codegen id : 9]
Output [1]: [d_date_sk#26]
Input [2]: [d_date_sk#26, d_date#27]

(48) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(49) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_returned_date_sk#23]
Right keys [1]: [d_date_sk#26]
Join condition: None

(50) Project [codegen id : 10]
Output [2]: [cr_return_quantity#22, i_item_id#25]
Input [4]: [cr_return_quantity#22, cr_returned_date_sk#23, i_item_id#25, d_date_sk#26]

(51) HashAggregate [codegen id : 10]
Input [2]: [cr_return_quantity#22, i_item_id#25]
Keys [1]: [i_item_id#25]
Functions [1]: [partial_sum(cr_return_quantity#22)]
Aggregate Attributes [1]: [sum#31]
Results [2]: [i_item_id#25, sum#32]

(52) Exchange
Input [2]: [i_item_id#25, sum#32]
Arguments: hashpartitioning(i_item_id#25, 5), ENSURE_REQUIREMENTS, [id=#33]

(53) HashAggregate [codegen id : 11]
Input [2]: [i_item_id#25, sum#32]
Keys [1]: [i_item_id#25]
Functions [1]: [sum(cr_return_quantity#22)]
Aggregate Attributes [1]: [sum(cr_return_quantity#22)#34]
Results [2]: [i_item_id#25 AS item_id#35, sum(cr_return_quantity#22)#34 AS cr_item_qty#36]

(54) BroadcastExchange
Input [2]: [item_id#35, cr_item_qty#36]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#37]

(55) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#35]
Join condition: None

(56) Project [codegen id : 18]
Output [3]: [item_id#19, sr_item_qty#20, cr_item_qty#36]
Input [4]: [item_id#19, sr_item_qty#20, item_id#35, cr_item_qty#36]

(57) Scan parquet default.web_returns
Output [3]: [wr_item_sk#38, wr_return_quantity#39, wr_returned_date_sk#40]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#40), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:bigint,wr_return_quantity:int>

(58) ColumnarToRow [codegen id : 16]
Input [3]: [wr_item_sk#38, wr_return_quantity#39, wr_returned_date_sk#40]

(59) Filter [codegen id : 16]
Input [3]: [wr_item_sk#38, wr_return_quantity#39, wr_returned_date_sk#40]
Condition : isnotnull(wr_item_sk#38)

(60) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#41, i_item_id#42]

(61) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [wr_item_sk#38]
Right keys [1]: [cast(i_item_sk#41 as bigint)]
Join condition: None

(62) Project [codegen id : 16]
Output [3]: [wr_return_quantity#39, wr_returned_date_sk#40, i_item_id#42]
Input [5]: [wr_item_sk#38, wr_return_quantity#39, wr_returned_date_sk#40, i_item_sk#41, i_item_id#42]

(63) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#43]

(64) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [wr_returned_date_sk#40]
Right keys [1]: [cast(d_date_sk#43 as bigint)]
Join condition: None

(65) Project [codegen id : 16]
Output [2]: [wr_return_quantity#39, i_item_id#42]
Input [4]: [wr_return_quantity#39, wr_returned_date_sk#40, i_item_id#42, d_date_sk#43]

(66) HashAggregate [codegen id : 16]
Input [2]: [wr_return_quantity#39, i_item_id#42]
Keys [1]: [i_item_id#42]
Functions [1]: [partial_sum(wr_return_quantity#39)]
Aggregate Attributes [1]: [sum#44]
Results [2]: [i_item_id#42, sum#45]

(67) Exchange
Input [2]: [i_item_id#42, sum#45]
Arguments: hashpartitioning(i_item_id#42, 5), ENSURE_REQUIREMENTS, [id=#46]

(68) HashAggregate [codegen id : 17]
Input [2]: [i_item_id#42, sum#45]
Keys [1]: [i_item_id#42]
Functions [1]: [sum(wr_return_quantity#39)]
Aggregate Attributes [1]: [sum(wr_return_quantity#39)#47]
Results [2]: [i_item_id#42 AS item_id#48, sum(wr_return_quantity#39)#47 AS wr_item_qty#49]

(69) BroadcastExchange
Input [2]: [item_id#48, wr_item_qty#49]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#50]

(70) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#48]
Join condition: None

(71) Project [codegen id : 18]
Output [8]: [item_id#19, sr_item_qty#20, (((cast(sr_item_qty#20 as double) / cast(((sr_item_qty#20 + cr_item_qty#36) + wr_item_qty#49) as double)) / 3.0) * 100.0) AS sr_dev#51, cr_item_qty#36, (((cast(cr_item_qty#36 as double) / cast(((sr_item_qty#20 + cr_item_qty#36) + wr_item_qty#49) as double)) / 3.0) * 100.0) AS cr_dev#52, wr_item_qty#49, (((cast(wr_item_qty#49 as double) / cast(((sr_item_qty#20 + cr_item_qty#36) + wr_item_qty#49) as double)) / 3.0) * 100.0) AS wr_dev#53, CheckOverflow((promote_precision(cast(cast(((sr_item_qty#20 + cr_item_qty#36) + wr_item_qty#49) as decimal(20,0)) as decimal(21,1))) / 3.0), DecimalType(27,6), true) AS average#54]
Input [5]: [item_id#19, sr_item_qty#20, cr_item_qty#36, item_id#48, wr_item_qty#49]

(72) TakeOrderedAndProject
Input [8]: [item_id#19, sr_item_qty#20, sr_dev#51, cr_item_qty#36, cr_dev#52, wr_item_qty#49, wr_dev#53, average#54]
Arguments: 100, [item_id#19 ASC NULLS FIRST, sr_item_qty#20 ASC NULLS FIRST], [item_id#19, sr_item_qty#20, sr_dev#51, cr_item_qty#36, cr_dev#52, wr_item_qty#49, wr_dev#53, average#54]

