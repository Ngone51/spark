== Physical Plan ==
TakeOrderedAndProject (194)
+- * HashAggregate (193)
   +- Exchange (192)
      +- * HashAggregate (191)
         +- Union (190)
            :- * HashAggregate (113)
            :  +- Exchange (112)
            :     +- * HashAggregate (111)
            :        +- Union (110)
            :           :- * Project (77)
            :           :  +- * Filter (76)
            :           :     +- * HashAggregate (75)
            :           :        +- Exchange (74)
            :           :           +- * HashAggregate (73)
            :           :              +- * Project (72)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (71)
            :           :                    :- * Project (65)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (64)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
            :           :                    :     :  :- * Filter (3)
            :           :                    :     :  :  +- * ColumnarToRow (2)
            :           :                    :     :  :     +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- BroadcastExchange (56)
            :           :                    :     :     +- * Project (55)
            :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                    :     :           :- * Filter (6)
            :           :                    :     :           :  +- * ColumnarToRow (5)
            :           :                    :     :           :     +- Scan parquet default.item (4)
            :           :                    :     :           +- BroadcastExchange (53)
            :           :                    :     :              +- * HashAggregate (52)
            :           :                    :     :                 +- * HashAggregate (51)
            :           :                    :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (50)
            :           :                    :     :                       :- * HashAggregate (39)
            :           :                    :     :                       :  +- Exchange (38)
            :           :                    :     :                       :     +- * HashAggregate (37)
            :           :                    :     :                       :        +- * Project (36)
            :           :                    :     :                       :           +- * BroadcastHashJoin Inner BuildRight (35)
            :           :                    :     :                       :              :- * Project (33)
            :           :                    :     :                       :              :  +- * BroadcastHashJoin Inner BuildRight (32)
            :           :                    :     :                       :              :     :- * Filter (9)
            :           :                    :     :                       :              :     :  +- * ColumnarToRow (8)
            :           :                    :     :                       :              :     :     +- Scan parquet default.store_sales (7)
            :           :                    :     :                       :              :     +- BroadcastExchange (31)
            :           :                    :     :                       :              :        +- * BroadcastHashJoin LeftSemi BuildRight (30)
            :           :                    :     :                       :              :           :- * Filter (12)
            :           :                    :     :                       :              :           :  +- * ColumnarToRow (11)
            :           :                    :     :                       :              :           :     +- Scan parquet default.item (10)
            :           :                    :     :                       :              :           +- BroadcastExchange (29)
            :           :                    :     :                       :              :              +- * Project (28)
            :           :                    :     :                       :              :                 +- * BroadcastHashJoin Inner BuildRight (27)
            :           :                    :     :                       :              :                    :- * Project (21)
            :           :                    :     :                       :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                    :     :                       :              :                    :     :- * Filter (15)
            :           :                    :     :                       :              :                    :     :  +- * ColumnarToRow (14)
            :           :                    :     :                       :              :                    :     :     +- Scan parquet default.catalog_sales (13)
            :           :                    :     :                       :              :                    :     +- BroadcastExchange (19)
            :           :                    :     :                       :              :                    :        +- * Filter (18)
            :           :                    :     :                       :              :                    :           +- * ColumnarToRow (17)
            :           :                    :     :                       :              :                    :              +- Scan parquet default.item (16)
            :           :                    :     :                       :              :                    +- BroadcastExchange (26)
            :           :                    :     :                       :              :                       +- * Project (25)
            :           :                    :     :                       :              :                          +- * Filter (24)
            :           :                    :     :                       :              :                             +- * ColumnarToRow (23)
            :           :                    :     :                       :              :                                +- Scan parquet default.date_dim (22)
            :           :                    :     :                       :              +- ReusedExchange (34)
            :           :                    :     :                       +- BroadcastExchange (49)
            :           :                    :     :                          +- * Project (48)
            :           :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (47)
            :           :                    :     :                                :- * Project (45)
            :           :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (44)
            :           :                    :     :                                :     :- * Filter (42)
            :           :                    :     :                                :     :  +- * ColumnarToRow (41)
            :           :                    :     :                                :     :     +- Scan parquet default.web_sales (40)
            :           :                    :     :                                :     +- ReusedExchange (43)
            :           :                    :     :                                +- ReusedExchange (46)
            :           :                    :     +- BroadcastExchange (63)
            :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
            :           :                    :           :- * Filter (60)
            :           :                    :           :  +- * ColumnarToRow (59)
            :           :                    :           :     +- Scan parquet default.item (58)
            :           :                    :           +- ReusedExchange (61)
            :           :                    +- BroadcastExchange (70)
            :           :                       +- * Project (69)
            :           :                          +- * Filter (68)
            :           :                             +- * ColumnarToRow (67)
            :           :                                +- Scan parquet default.date_dim (66)
            :           :- * Project (93)
            :           :  +- * Filter (92)
            :           :     +- * HashAggregate (91)
            :           :        +- Exchange (90)
            :           :           +- * HashAggregate (89)
            :           :              +- * Project (88)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (87)
            :           :                    :- * Project (85)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (84)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (82)
            :           :                    :     :  :- * Filter (80)
            :           :                    :     :  :  +- * ColumnarToRow (79)
            :           :                    :     :  :     +- Scan parquet default.catalog_sales (78)
            :           :                    :     :  +- ReusedExchange (81)
            :           :                    :     +- ReusedExchange (83)
            :           :                    +- ReusedExchange (86)
            :           +- * Project (109)
            :              +- * Filter (108)
            :                 +- * HashAggregate (107)
            :                    +- Exchange (106)
            :                       +- * HashAggregate (105)
            :                          +- * Project (104)
            :                             +- * BroadcastHashJoin Inner BuildRight (103)
            :                                :- * Project (101)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (100)
            :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (98)
            :                                :     :  :- * Filter (96)
            :                                :     :  :  +- * ColumnarToRow (95)
            :                                :     :  :     +- Scan parquet default.web_sales (94)
            :                                :     :  +- ReusedExchange (97)
            :                                :     +- ReusedExchange (99)
            :                                +- ReusedExchange (102)
            :- * HashAggregate (132)
            :  +- Exchange (131)
            :     +- * HashAggregate (130)
            :        +- * HashAggregate (129)
            :           +- Exchange (128)
            :              +- * HashAggregate (127)
            :                 +- Union (126)
            :                    :- * Project (117)
            :                    :  +- * Filter (116)
            :                    :     +- * HashAggregate (115)
            :                    :        +- ReusedExchange (114)
            :                    :- * Project (121)
            :                    :  +- * Filter (120)
            :                    :     +- * HashAggregate (119)
            :                    :        +- ReusedExchange (118)
            :                    +- * Project (125)
            :                       +- * Filter (124)
            :                          +- * HashAggregate (123)
            :                             +- ReusedExchange (122)
            :- * HashAggregate (151)
            :  +- Exchange (150)
            :     +- * HashAggregate (149)
            :        +- * HashAggregate (148)
            :           +- Exchange (147)
            :              +- * HashAggregate (146)
            :                 +- Union (145)
            :                    :- * Project (136)
            :                    :  +- * Filter (135)
            :                    :     +- * HashAggregate (134)
            :                    :        +- ReusedExchange (133)
            :                    :- * Project (140)
            :                    :  +- * Filter (139)
            :                    :     +- * HashAggregate (138)
            :                    :        +- ReusedExchange (137)
            :                    +- * Project (144)
            :                       +- * Filter (143)
            :                          +- * HashAggregate (142)
            :                             +- ReusedExchange (141)
            :- * HashAggregate (170)
            :  +- Exchange (169)
            :     +- * HashAggregate (168)
            :        +- * HashAggregate (167)
            :           +- Exchange (166)
            :              +- * HashAggregate (165)
            :                 +- Union (164)
            :                    :- * Project (155)
            :                    :  +- * Filter (154)
            :                    :     +- * HashAggregate (153)
            :                    :        +- ReusedExchange (152)
            :                    :- * Project (159)
            :                    :  +- * Filter (158)
            :                    :     +- * HashAggregate (157)
            :                    :        +- ReusedExchange (156)
            :                    +- * Project (163)
            :                       +- * Filter (162)
            :                          +- * HashAggregate (161)
            :                             +- ReusedExchange (160)
            +- * HashAggregate (189)
               +- Exchange (188)
                  +- * HashAggregate (187)
                     +- * HashAggregate (186)
                        +- Exchange (185)
                           +- * HashAggregate (184)
                              +- Union (183)
                                 :- * Project (174)
                                 :  +- * Filter (173)
                                 :     +- * HashAggregate (172)
                                 :        +- ReusedExchange (171)
                                 :- * Project (178)
                                 :  +- * Filter (177)
                                 :     +- * HashAggregate (176)
                                 :        +- ReusedExchange (175)
                                 +- * Project (182)
                                    +- * Filter (181)
                                       +- * HashAggregate (180)
                                          +- ReusedExchange (179)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) Scan parquet default.item
Output [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Condition : (((isnotnull(i_item_sk#11) AND isnotnull(i_brand_id#12)) AND isnotnull(i_class_id#13)) AND isnotnull(i_category_id#14))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(16) Scan parquet default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : isnotnull(i_item_sk#17)

(19) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#17]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#16, i_brand_id#18, i_class_id#19, i_category_id#20]
Input [6]: [cs_item_sk#15, cs_sold_date_sk#16, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(22) Scan parquet default.date_dim
Output [2]: [d_date_sk#22, d_year#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(23) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#22, d_year#23]

(24) Filter [codegen id : 2]
Input [2]: [d_date_sk#22, d_year#23]
Condition : (((isnotnull(d_year#23) AND (d_year#23 >= 1999)) AND (d_year#23 <= 2001)) AND isnotnull(d_date_sk#22))

(25) Project [codegen id : 2]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_year#23]

(26) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(27) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#22]
Join condition: None

(28) Project [codegen id : 3]
Output [3]: [i_brand_id#18, i_class_id#19, i_category_id#20]
Input [5]: [cs_sold_date_sk#16, i_brand_id#18, i_class_id#19, i_category_id#20, d_date_sk#22]

(29) BroadcastExchange
Input [3]: [i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(30) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#12, 0), isnull(i_brand_id#12), coalesce(i_class_id#13, 0), isnull(i_class_id#13), coalesce(i_category_id#14, 0), isnull(i_category_id#14)]
Right keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Join condition: None

(31) BroadcastExchange
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#11]
Join condition: None

(33) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#4, i_brand_id#12, i_class_id#13, i_category_id#14]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(34) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#27]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(36) Project [codegen id : 6]
Output [3]: [i_brand_id#12 AS brand_id#28, i_class_id#13 AS class_id#29, i_category_id#14 AS category_id#30]
Input [5]: [ss_sold_date_sk#4, i_brand_id#12, i_class_id#13, i_category_id#14, d_date_sk#27]

(37) HashAggregate [codegen id : 6]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(38) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(39) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(40) Scan parquet default.web_sales
Output [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(41) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]

(42) Filter [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(43) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(44) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#34]
Join condition: None

(45) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [6]: [ws_item_sk#32, ws_sold_date_sk#33, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(46) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#38]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#38]
Join condition: None

(48) Project [codegen id : 9]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]

(49) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(51) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(52) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(53) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#40]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join condition: None

(55) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#41]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(56) BroadcastExchange
Input [1]: [ss_item_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(57) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(58) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(59) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(60) Filter [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(61) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#41]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(63) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#43]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(65) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(66) Scan parquet default.date_dim
Output [3]: [d_date_sk#27, d_year#44, d_moy#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(67) ColumnarToRow [codegen id : 24]
Input [3]: [d_date_sk#27, d_year#44, d_moy#45]

(68) Filter [codegen id : 24]
Input [3]: [d_date_sk#27, d_year#44, d_moy#45]
Condition : ((((isnotnull(d_year#44) AND isnotnull(d_moy#45)) AND (d_year#44 = 2000)) AND (d_moy#45 = 11)) AND isnotnull(d_date_sk#27))

(69) Project [codegen id : 24]
Output [1]: [d_date_sk#27]
Input [3]: [d_date_sk#27, d_year#44, d_moy#45]

(70) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#46]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(72) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#27]

(73) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#47, isEmpty#48, count#49]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#50, isEmpty#51, count#52]

(74) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#50, isEmpty#51, count#52]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#53]

(75) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#50, isEmpty#51, count#52]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#54, count(1)#55]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sales#56, count(1)#55 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58]

(76) Filter [codegen id : 26]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58 as decimal(32,6)) > cast(Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(77) Project [codegen id : 26]
Output [6]: [store AS channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#58]

(78) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#15, cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#15, cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]

(80) Filter [codegen id : 51]
Input [4]: [cs_item_sk#15, cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(81) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#41]

(82) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(83) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67]

(84) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#64]
Join condition: None

(85) Project [codegen id : 51]
Output [6]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16, i_brand_id#65, i_class_id#66, i_category_id#67]
Input [8]: [cs_item_sk#15, cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16, i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67]

(86) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#68]

(87) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#68]
Join condition: None

(88) Project [codegen id : 51]
Output [5]: [cs_quantity#62, cs_list_price#63, i_brand_id#65, i_class_id#66, i_category_id#67]
Input [7]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16, i_brand_id#65, i_class_id#66, i_category_id#67, d_date_sk#68]

(89) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#62, cs_list_price#63, i_brand_id#65, i_class_id#66, i_category_id#67]
Keys [3]: [i_brand_id#65, i_class_id#66, i_category_id#67]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#69, isEmpty#70, count#71]
Results [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum#72, isEmpty#73, count#74]

(90) Exchange
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum#72, isEmpty#73, count#74]
Arguments: hashpartitioning(i_brand_id#65, i_class_id#66, i_category_id#67, 5), ENSURE_REQUIREMENTS, [id=#75]

(91) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum#72, isEmpty#73, count#74]
Keys [3]: [i_brand_id#65, i_class_id#66, i_category_id#67]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#76, count(1)#77]
Results [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sales#78, count(1)#77 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80]

(92) Filter [codegen id : 52]
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(93) Project [codegen id : 52]
Output [6]: [catalog AS channel#81, i_brand_id#65, i_class_id#66, i_category_id#67, sales#78, number_sales#79]
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#80]

(94) Scan parquet default.web_sales
Output [4]: [ws_item_sk#32, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#32, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]

(96) Filter [codegen id : 77]
Input [4]: [ws_item_sk#32, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(97) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#41]

(98) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(99) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#84, i_brand_id#85, i_class_id#86, i_category_id#87]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#84]
Join condition: None

(101) Project [codegen id : 77]
Output [6]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33, i_brand_id#85, i_class_id#86, i_category_id#87]
Input [8]: [ws_item_sk#32, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33, i_item_sk#84, i_brand_id#85, i_class_id#86, i_category_id#87]

(102) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#88]

(103) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#88]
Join condition: None

(104) Project [codegen id : 77]
Output [5]: [ws_quantity#82, ws_list_price#83, i_brand_id#85, i_class_id#86, i_category_id#87]
Input [7]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33, i_brand_id#85, i_class_id#86, i_category_id#87, d_date_sk#88]

(105) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#82, ws_list_price#83, i_brand_id#85, i_class_id#86, i_category_id#87]
Keys [3]: [i_brand_id#85, i_class_id#86, i_category_id#87]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#89, isEmpty#90, count#91]
Results [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum#92, isEmpty#93, count#94]

(106) Exchange
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum#92, isEmpty#93, count#94]
Arguments: hashpartitioning(i_brand_id#85, i_class_id#86, i_category_id#87, 5), ENSURE_REQUIREMENTS, [id=#95]

(107) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum#92, isEmpty#93, count#94]
Keys [3]: [i_brand_id#85, i_class_id#86, i_category_id#87]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#96, count(1)#97]
Results [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#96 AS sales#98, count(1)#97 AS number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#96 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100]

(108) Filter [codegen id : 78]
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(109) Project [codegen id : 78]
Output [6]: [web AS channel#101, i_brand_id#85, i_class_id#86, i_category_id#87, sales#98, number_sales#99]
Input [6]: [i_brand_id#85, i_class_id#86, i_category_id#87, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#82 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#83 as decimal(12,2)))), DecimalType(18,2), true))#100]

(110) Union

(111) HashAggregate [codegen id : 79]
Input [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57]
Keys [4]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#56), partial_sum(number_sales#57)]
Aggregate Attributes [3]: [sum#102, isEmpty#103, sum#104]
Results [7]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum#105, isEmpty#106, sum#107]

(112) Exchange
Input [7]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum#105, isEmpty#106, sum#107]
Arguments: hashpartitioning(channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#108]

(113) HashAggregate [codegen id : 80]
Input [7]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum#105, isEmpty#106, sum#107]
Keys [4]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#56), sum(number_sales#57)]
Aggregate Attributes [2]: [sum(sales#56)#109, sum(number_sales#57)#110]
Results [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum(sales#56)#109 AS sum_sales#111, sum(number_sales#57)#110 AS number_sales#112]

(114) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#113, i_class_id#114, i_category_id#115, sum#116, isEmpty#117, count#118]

(115) HashAggregate [codegen id : 106]
Input [6]: [i_brand_id#113, i_class_id#114, i_category_id#115, sum#116, isEmpty#117, count#118]
Keys [3]: [i_brand_id#113, i_class_id#114, i_category_id#115]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#119 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#120 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#119 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#120 as decimal(12,2)))), DecimalType(18,2), true))#121, count(1)#122]
Results [6]: [i_brand_id#113, i_class_id#114, i_category_id#115, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#119 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#120 as decimal(12,2)))), DecimalType(18,2), true))#121 AS sales#56, count(1)#122 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#119 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#120 as decimal(12,2)))), DecimalType(18,2), true))#121 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#119 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#120 as decimal(12,2)))), DecimalType(18,2), true))#123]

(116) Filter [codegen id : 106]
Input [6]: [i_brand_id#113, i_class_id#114, i_category_id#115, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#119 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#120 as decimal(12,2)))), DecimalType(18,2), true))#123]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#119 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#120 as decimal(12,2)))), DecimalType(18,2), true))#123) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#119 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#120 as decimal(12,2)))), DecimalType(18,2), true))#123 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(117) Project [codegen id : 106]
Output [6]: [store AS channel#61, i_brand_id#113, i_class_id#114, i_category_id#115, sales#56, number_sales#57]
Input [6]: [i_brand_id#113, i_class_id#114, i_category_id#115, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#119 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#120 as decimal(12,2)))), DecimalType(18,2), true))#123]

(118) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#124, i_class_id#125, i_category_id#126, sum#127, isEmpty#128, count#129]

(119) HashAggregate [codegen id : 132]
Input [6]: [i_brand_id#124, i_class_id#125, i_category_id#126, sum#127, isEmpty#128, count#129]
Keys [3]: [i_brand_id#124, i_class_id#125, i_category_id#126]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#130 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#131 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#130 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#131 as decimal(12,2)))), DecimalType(18,2), true))#132, count(1)#133]
Results [6]: [i_brand_id#124, i_class_id#125, i_category_id#126, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#130 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#131 as decimal(12,2)))), DecimalType(18,2), true))#132 AS sales#78, count(1)#133 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#130 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#131 as decimal(12,2)))), DecimalType(18,2), true))#132 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#130 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#131 as decimal(12,2)))), DecimalType(18,2), true))#134]

(120) Filter [codegen id : 132]
Input [6]: [i_brand_id#124, i_class_id#125, i_category_id#126, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#130 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#131 as decimal(12,2)))), DecimalType(18,2), true))#134]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#130 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#131 as decimal(12,2)))), DecimalType(18,2), true))#134) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#130 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#131 as decimal(12,2)))), DecimalType(18,2), true))#134 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(121) Project [codegen id : 132]
Output [6]: [catalog AS channel#81, i_brand_id#124, i_class_id#125, i_category_id#126, sales#78, number_sales#79]
Input [6]: [i_brand_id#124, i_class_id#125, i_category_id#126, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#130 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#131 as decimal(12,2)))), DecimalType(18,2), true))#134]

(122) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#135, i_class_id#136, i_category_id#137, sum#138, isEmpty#139, count#140]

(123) HashAggregate [codegen id : 158]
Input [6]: [i_brand_id#135, i_class_id#136, i_category_id#137, sum#138, isEmpty#139, count#140]
Keys [3]: [i_brand_id#135, i_class_id#136, i_category_id#137]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#141 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#142 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#141 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#142 as decimal(12,2)))), DecimalType(18,2), true))#143, count(1)#144]
Results [6]: [i_brand_id#135, i_class_id#136, i_category_id#137, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#141 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#142 as decimal(12,2)))), DecimalType(18,2), true))#143 AS sales#98, count(1)#144 AS number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#141 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#142 as decimal(12,2)))), DecimalType(18,2), true))#143 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#141 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#142 as decimal(12,2)))), DecimalType(18,2), true))#145]

(124) Filter [codegen id : 158]
Input [6]: [i_brand_id#135, i_class_id#136, i_category_id#137, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#141 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#142 as decimal(12,2)))), DecimalType(18,2), true))#145]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#141 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#142 as decimal(12,2)))), DecimalType(18,2), true))#145) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#141 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#142 as decimal(12,2)))), DecimalType(18,2), true))#145 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(125) Project [codegen id : 158]
Output [6]: [web AS channel#101, i_brand_id#135, i_class_id#136, i_category_id#137, sales#98, number_sales#99]
Input [6]: [i_brand_id#135, i_class_id#136, i_category_id#137, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#141 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#142 as decimal(12,2)))), DecimalType(18,2), true))#145]

(126) Union

(127) HashAggregate [codegen id : 159]
Input [6]: [channel#61, i_brand_id#113, i_class_id#114, i_category_id#115, sales#56, number_sales#57]
Keys [4]: [channel#61, i_brand_id#113, i_class_id#114, i_category_id#115]
Functions [2]: [partial_sum(sales#56), partial_sum(number_sales#57)]
Aggregate Attributes [3]: [sum#146, isEmpty#147, sum#148]
Results [7]: [channel#61, i_brand_id#113, i_class_id#114, i_category_id#115, sum#149, isEmpty#150, sum#151]

(128) Exchange
Input [7]: [channel#61, i_brand_id#113, i_class_id#114, i_category_id#115, sum#149, isEmpty#150, sum#151]
Arguments: hashpartitioning(channel#61, i_brand_id#113, i_class_id#114, i_category_id#115, 5), ENSURE_REQUIREMENTS, [id=#152]

(129) HashAggregate [codegen id : 160]
Input [7]: [channel#61, i_brand_id#113, i_class_id#114, i_category_id#115, sum#149, isEmpty#150, sum#151]
Keys [4]: [channel#61, i_brand_id#113, i_class_id#114, i_category_id#115]
Functions [2]: [sum(sales#56), sum(number_sales#57)]
Aggregate Attributes [2]: [sum(sales#56)#153, sum(number_sales#57)#154]
Results [5]: [channel#61, i_brand_id#113, i_class_id#114, sum(sales#56)#153 AS sum_sales#111, sum(number_sales#57)#154 AS number_sales#112]

(130) HashAggregate [codegen id : 160]
Input [5]: [channel#61, i_brand_id#113, i_class_id#114, sum_sales#111, number_sales#112]
Keys [3]: [channel#61, i_brand_id#113, i_class_id#114]
Functions [2]: [partial_sum(sum_sales#111), partial_sum(number_sales#112)]
Aggregate Attributes [3]: [sum#155, isEmpty#156, sum#157]
Results [6]: [channel#61, i_brand_id#113, i_class_id#114, sum#158, isEmpty#159, sum#160]

(131) Exchange
Input [6]: [channel#61, i_brand_id#113, i_class_id#114, sum#158, isEmpty#159, sum#160]
Arguments: hashpartitioning(channel#61, i_brand_id#113, i_class_id#114, 5), ENSURE_REQUIREMENTS, [id=#161]

(132) HashAggregate [codegen id : 161]
Input [6]: [channel#61, i_brand_id#113, i_class_id#114, sum#158, isEmpty#159, sum#160]
Keys [3]: [channel#61, i_brand_id#113, i_class_id#114]
Functions [2]: [sum(sum_sales#111), sum(number_sales#112)]
Aggregate Attributes [2]: [sum(sum_sales#111)#162, sum(number_sales#112)#163]
Results [6]: [channel#61, i_brand_id#113, i_class_id#114, null AS i_category_id#164, sum(sum_sales#111)#162 AS sum(sum_sales)#165, sum(number_sales#112)#163 AS sum(number_sales)#166]

(133) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#167, i_class_id#168, i_category_id#169, sum#170, isEmpty#171, count#172]

(134) HashAggregate [codegen id : 187]
Input [6]: [i_brand_id#167, i_class_id#168, i_category_id#169, sum#170, isEmpty#171, count#172]
Keys [3]: [i_brand_id#167, i_class_id#168, i_category_id#169]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#173 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#174 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#173 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#174 as decimal(12,2)))), DecimalType(18,2), true))#175, count(1)#176]
Results [6]: [i_brand_id#167, i_class_id#168, i_category_id#169, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#173 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#174 as decimal(12,2)))), DecimalType(18,2), true))#175 AS sales#56, count(1)#176 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#173 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#174 as decimal(12,2)))), DecimalType(18,2), true))#175 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#173 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#174 as decimal(12,2)))), DecimalType(18,2), true))#177]

(135) Filter [codegen id : 187]
Input [6]: [i_brand_id#167, i_class_id#168, i_category_id#169, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#173 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#174 as decimal(12,2)))), DecimalType(18,2), true))#177]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#173 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#174 as decimal(12,2)))), DecimalType(18,2), true))#177) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#173 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#174 as decimal(12,2)))), DecimalType(18,2), true))#177 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(136) Project [codegen id : 187]
Output [6]: [store AS channel#61, i_brand_id#167, i_class_id#168, i_category_id#169, sales#56, number_sales#57]
Input [6]: [i_brand_id#167, i_class_id#168, i_category_id#169, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#173 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#174 as decimal(12,2)))), DecimalType(18,2), true))#177]

(137) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#178, i_class_id#179, i_category_id#180, sum#181, isEmpty#182, count#183]

(138) HashAggregate [codegen id : 213]
Input [6]: [i_brand_id#178, i_class_id#179, i_category_id#180, sum#181, isEmpty#182, count#183]
Keys [3]: [i_brand_id#178, i_class_id#179, i_category_id#180]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#184 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#185 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#184 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#185 as decimal(12,2)))), DecimalType(18,2), true))#186, count(1)#187]
Results [6]: [i_brand_id#178, i_class_id#179, i_category_id#180, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#184 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#185 as decimal(12,2)))), DecimalType(18,2), true))#186 AS sales#78, count(1)#187 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#184 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#185 as decimal(12,2)))), DecimalType(18,2), true))#186 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#184 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#185 as decimal(12,2)))), DecimalType(18,2), true))#188]

(139) Filter [codegen id : 213]
Input [6]: [i_brand_id#178, i_class_id#179, i_category_id#180, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#184 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#185 as decimal(12,2)))), DecimalType(18,2), true))#188]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#184 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#185 as decimal(12,2)))), DecimalType(18,2), true))#188) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#184 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#185 as decimal(12,2)))), DecimalType(18,2), true))#188 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(140) Project [codegen id : 213]
Output [6]: [catalog AS channel#81, i_brand_id#178, i_class_id#179, i_category_id#180, sales#78, number_sales#79]
Input [6]: [i_brand_id#178, i_class_id#179, i_category_id#180, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#184 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#185 as decimal(12,2)))), DecimalType(18,2), true))#188]

(141) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#189, i_class_id#190, i_category_id#191, sum#192, isEmpty#193, count#194]

(142) HashAggregate [codegen id : 239]
Input [6]: [i_brand_id#189, i_class_id#190, i_category_id#191, sum#192, isEmpty#193, count#194]
Keys [3]: [i_brand_id#189, i_class_id#190, i_category_id#191]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#195 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#196 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#195 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#196 as decimal(12,2)))), DecimalType(18,2), true))#197, count(1)#198]
Results [6]: [i_brand_id#189, i_class_id#190, i_category_id#191, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#195 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#196 as decimal(12,2)))), DecimalType(18,2), true))#197 AS sales#98, count(1)#198 AS number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#195 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#196 as decimal(12,2)))), DecimalType(18,2), true))#197 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#195 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#196 as decimal(12,2)))), DecimalType(18,2), true))#199]

(143) Filter [codegen id : 239]
Input [6]: [i_brand_id#189, i_class_id#190, i_category_id#191, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#195 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#196 as decimal(12,2)))), DecimalType(18,2), true))#199]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#195 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#196 as decimal(12,2)))), DecimalType(18,2), true))#199) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#195 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#196 as decimal(12,2)))), DecimalType(18,2), true))#199 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(144) Project [codegen id : 239]
Output [6]: [web AS channel#101, i_brand_id#189, i_class_id#190, i_category_id#191, sales#98, number_sales#99]
Input [6]: [i_brand_id#189, i_class_id#190, i_category_id#191, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#195 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#196 as decimal(12,2)))), DecimalType(18,2), true))#199]

(145) Union

(146) HashAggregate [codegen id : 240]
Input [6]: [channel#61, i_brand_id#167, i_class_id#168, i_category_id#169, sales#56, number_sales#57]
Keys [4]: [channel#61, i_brand_id#167, i_class_id#168, i_category_id#169]
Functions [2]: [partial_sum(sales#56), partial_sum(number_sales#57)]
Aggregate Attributes [3]: [sum#200, isEmpty#201, sum#202]
Results [7]: [channel#61, i_brand_id#167, i_class_id#168, i_category_id#169, sum#203, isEmpty#204, sum#205]

(147) Exchange
Input [7]: [channel#61, i_brand_id#167, i_class_id#168, i_category_id#169, sum#203, isEmpty#204, sum#205]
Arguments: hashpartitioning(channel#61, i_brand_id#167, i_class_id#168, i_category_id#169, 5), ENSURE_REQUIREMENTS, [id=#206]

(148) HashAggregate [codegen id : 241]
Input [7]: [channel#61, i_brand_id#167, i_class_id#168, i_category_id#169, sum#203, isEmpty#204, sum#205]
Keys [4]: [channel#61, i_brand_id#167, i_class_id#168, i_category_id#169]
Functions [2]: [sum(sales#56), sum(number_sales#57)]
Aggregate Attributes [2]: [sum(sales#56)#207, sum(number_sales#57)#208]
Results [4]: [channel#61, i_brand_id#167, sum(sales#56)#207 AS sum_sales#111, sum(number_sales#57)#208 AS number_sales#112]

(149) HashAggregate [codegen id : 241]
Input [4]: [channel#61, i_brand_id#167, sum_sales#111, number_sales#112]
Keys [2]: [channel#61, i_brand_id#167]
Functions [2]: [partial_sum(sum_sales#111), partial_sum(number_sales#112)]
Aggregate Attributes [3]: [sum#209, isEmpty#210, sum#211]
Results [5]: [channel#61, i_brand_id#167, sum#212, isEmpty#213, sum#214]

(150) Exchange
Input [5]: [channel#61, i_brand_id#167, sum#212, isEmpty#213, sum#214]
Arguments: hashpartitioning(channel#61, i_brand_id#167, 5), ENSURE_REQUIREMENTS, [id=#215]

(151) HashAggregate [codegen id : 242]
Input [5]: [channel#61, i_brand_id#167, sum#212, isEmpty#213, sum#214]
Keys [2]: [channel#61, i_brand_id#167]
Functions [2]: [sum(sum_sales#111), sum(number_sales#112)]
Aggregate Attributes [2]: [sum(sum_sales#111)#216, sum(number_sales#112)#217]
Results [6]: [channel#61, i_brand_id#167, null AS i_class_id#218, null AS i_category_id#219, sum(sum_sales#111)#216 AS sum(sum_sales)#220, sum(number_sales#112)#217 AS sum(number_sales)#221]

(152) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#222, i_class_id#223, i_category_id#224, sum#225, isEmpty#226, count#227]

(153) HashAggregate [codegen id : 268]
Input [6]: [i_brand_id#222, i_class_id#223, i_category_id#224, sum#225, isEmpty#226, count#227]
Keys [3]: [i_brand_id#222, i_class_id#223, i_category_id#224]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#228 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#229 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#228 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#229 as decimal(12,2)))), DecimalType(18,2), true))#230, count(1)#231]
Results [6]: [i_brand_id#222, i_class_id#223, i_category_id#224, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#228 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#229 as decimal(12,2)))), DecimalType(18,2), true))#230 AS sales#56, count(1)#231 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#228 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#229 as decimal(12,2)))), DecimalType(18,2), true))#230 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#228 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#229 as decimal(12,2)))), DecimalType(18,2), true))#232]

(154) Filter [codegen id : 268]
Input [6]: [i_brand_id#222, i_class_id#223, i_category_id#224, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#228 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#229 as decimal(12,2)))), DecimalType(18,2), true))#232]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#228 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#229 as decimal(12,2)))), DecimalType(18,2), true))#232) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#228 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#229 as decimal(12,2)))), DecimalType(18,2), true))#232 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(155) Project [codegen id : 268]
Output [6]: [store AS channel#61, i_brand_id#222, i_class_id#223, i_category_id#224, sales#56, number_sales#57]
Input [6]: [i_brand_id#222, i_class_id#223, i_category_id#224, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#228 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#229 as decimal(12,2)))), DecimalType(18,2), true))#232]

(156) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#233, i_class_id#234, i_category_id#235, sum#236, isEmpty#237, count#238]

(157) HashAggregate [codegen id : 294]
Input [6]: [i_brand_id#233, i_class_id#234, i_category_id#235, sum#236, isEmpty#237, count#238]
Keys [3]: [i_brand_id#233, i_class_id#234, i_category_id#235]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#239 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#240 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#239 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#240 as decimal(12,2)))), DecimalType(18,2), true))#241, count(1)#242]
Results [6]: [i_brand_id#233, i_class_id#234, i_category_id#235, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#239 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#240 as decimal(12,2)))), DecimalType(18,2), true))#241 AS sales#78, count(1)#242 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#239 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#240 as decimal(12,2)))), DecimalType(18,2), true))#241 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#239 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#240 as decimal(12,2)))), DecimalType(18,2), true))#243]

(158) Filter [codegen id : 294]
Input [6]: [i_brand_id#233, i_class_id#234, i_category_id#235, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#239 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#240 as decimal(12,2)))), DecimalType(18,2), true))#243]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#239 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#240 as decimal(12,2)))), DecimalType(18,2), true))#243) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#239 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#240 as decimal(12,2)))), DecimalType(18,2), true))#243 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(159) Project [codegen id : 294]
Output [6]: [catalog AS channel#81, i_brand_id#233, i_class_id#234, i_category_id#235, sales#78, number_sales#79]
Input [6]: [i_brand_id#233, i_class_id#234, i_category_id#235, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#239 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#240 as decimal(12,2)))), DecimalType(18,2), true))#243]

(160) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#244, i_class_id#245, i_category_id#246, sum#247, isEmpty#248, count#249]

(161) HashAggregate [codegen id : 320]
Input [6]: [i_brand_id#244, i_class_id#245, i_category_id#246, sum#247, isEmpty#248, count#249]
Keys [3]: [i_brand_id#244, i_class_id#245, i_category_id#246]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#250 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#251 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#250 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#251 as decimal(12,2)))), DecimalType(18,2), true))#252, count(1)#253]
Results [6]: [i_brand_id#244, i_class_id#245, i_category_id#246, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#250 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#251 as decimal(12,2)))), DecimalType(18,2), true))#252 AS sales#98, count(1)#253 AS number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#250 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#251 as decimal(12,2)))), DecimalType(18,2), true))#252 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#250 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#251 as decimal(12,2)))), DecimalType(18,2), true))#254]

(162) Filter [codegen id : 320]
Input [6]: [i_brand_id#244, i_class_id#245, i_category_id#246, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#250 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#251 as decimal(12,2)))), DecimalType(18,2), true))#254]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#250 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#251 as decimal(12,2)))), DecimalType(18,2), true))#254) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#250 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#251 as decimal(12,2)))), DecimalType(18,2), true))#254 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(163) Project [codegen id : 320]
Output [6]: [web AS channel#101, i_brand_id#244, i_class_id#245, i_category_id#246, sales#98, number_sales#99]
Input [6]: [i_brand_id#244, i_class_id#245, i_category_id#246, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#250 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#251 as decimal(12,2)))), DecimalType(18,2), true))#254]

(164) Union

(165) HashAggregate [codegen id : 321]
Input [6]: [channel#61, i_brand_id#222, i_class_id#223, i_category_id#224, sales#56, number_sales#57]
Keys [4]: [channel#61, i_brand_id#222, i_class_id#223, i_category_id#224]
Functions [2]: [partial_sum(sales#56), partial_sum(number_sales#57)]
Aggregate Attributes [3]: [sum#255, isEmpty#256, sum#257]
Results [7]: [channel#61, i_brand_id#222, i_class_id#223, i_category_id#224, sum#258, isEmpty#259, sum#260]

(166) Exchange
Input [7]: [channel#61, i_brand_id#222, i_class_id#223, i_category_id#224, sum#258, isEmpty#259, sum#260]
Arguments: hashpartitioning(channel#61, i_brand_id#222, i_class_id#223, i_category_id#224, 5), ENSURE_REQUIREMENTS, [id=#261]

(167) HashAggregate [codegen id : 322]
Input [7]: [channel#61, i_brand_id#222, i_class_id#223, i_category_id#224, sum#258, isEmpty#259, sum#260]
Keys [4]: [channel#61, i_brand_id#222, i_class_id#223, i_category_id#224]
Functions [2]: [sum(sales#56), sum(number_sales#57)]
Aggregate Attributes [2]: [sum(sales#56)#262, sum(number_sales#57)#263]
Results [3]: [channel#61, sum(sales#56)#262 AS sum_sales#111, sum(number_sales#57)#263 AS number_sales#112]

(168) HashAggregate [codegen id : 322]
Input [3]: [channel#61, sum_sales#111, number_sales#112]
Keys [1]: [channel#61]
Functions [2]: [partial_sum(sum_sales#111), partial_sum(number_sales#112)]
Aggregate Attributes [3]: [sum#264, isEmpty#265, sum#266]
Results [4]: [channel#61, sum#267, isEmpty#268, sum#269]

(169) Exchange
Input [4]: [channel#61, sum#267, isEmpty#268, sum#269]
Arguments: hashpartitioning(channel#61, 5), ENSURE_REQUIREMENTS, [id=#270]

(170) HashAggregate [codegen id : 323]
Input [4]: [channel#61, sum#267, isEmpty#268, sum#269]
Keys [1]: [channel#61]
Functions [2]: [sum(sum_sales#111), sum(number_sales#112)]
Aggregate Attributes [2]: [sum(sum_sales#111)#271, sum(number_sales#112)#272]
Results [6]: [channel#61, null AS i_brand_id#273, null AS i_class_id#274, null AS i_category_id#275, sum(sum_sales#111)#271 AS sum(sum_sales)#276, sum(number_sales#112)#272 AS sum(number_sales)#277]

(171) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#278, i_class_id#279, i_category_id#280, sum#281, isEmpty#282, count#283]

(172) HashAggregate [codegen id : 349]
Input [6]: [i_brand_id#278, i_class_id#279, i_category_id#280, sum#281, isEmpty#282, count#283]
Keys [3]: [i_brand_id#278, i_class_id#279, i_category_id#280]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#284 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#285 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#284 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#285 as decimal(12,2)))), DecimalType(18,2), true))#286, count(1)#287]
Results [6]: [i_brand_id#278, i_class_id#279, i_category_id#280, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#284 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#285 as decimal(12,2)))), DecimalType(18,2), true))#286 AS sales#56, count(1)#287 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#284 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#285 as decimal(12,2)))), DecimalType(18,2), true))#286 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#284 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#285 as decimal(12,2)))), DecimalType(18,2), true))#288]

(173) Filter [codegen id : 349]
Input [6]: [i_brand_id#278, i_class_id#279, i_category_id#280, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#284 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#285 as decimal(12,2)))), DecimalType(18,2), true))#288]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#284 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#285 as decimal(12,2)))), DecimalType(18,2), true))#288) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#284 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#285 as decimal(12,2)))), DecimalType(18,2), true))#288 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(174) Project [codegen id : 349]
Output [6]: [store AS channel#61, i_brand_id#278, i_class_id#279, i_category_id#280, sales#56, number_sales#57]
Input [6]: [i_brand_id#278, i_class_id#279, i_category_id#280, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#284 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#285 as decimal(12,2)))), DecimalType(18,2), true))#288]

(175) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#289, i_class_id#290, i_category_id#291, sum#292, isEmpty#293, count#294]

(176) HashAggregate [codegen id : 375]
Input [6]: [i_brand_id#289, i_class_id#290, i_category_id#291, sum#292, isEmpty#293, count#294]
Keys [3]: [i_brand_id#289, i_class_id#290, i_category_id#291]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#295 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#296 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#295 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#296 as decimal(12,2)))), DecimalType(18,2), true))#297, count(1)#298]
Results [6]: [i_brand_id#289, i_class_id#290, i_category_id#291, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#295 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#296 as decimal(12,2)))), DecimalType(18,2), true))#297 AS sales#78, count(1)#298 AS number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#295 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#296 as decimal(12,2)))), DecimalType(18,2), true))#297 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#295 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#296 as decimal(12,2)))), DecimalType(18,2), true))#299]

(177) Filter [codegen id : 375]
Input [6]: [i_brand_id#289, i_class_id#290, i_category_id#291, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#295 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#296 as decimal(12,2)))), DecimalType(18,2), true))#299]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#295 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#296 as decimal(12,2)))), DecimalType(18,2), true))#299) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#295 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#296 as decimal(12,2)))), DecimalType(18,2), true))#299 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(178) Project [codegen id : 375]
Output [6]: [catalog AS channel#81, i_brand_id#289, i_class_id#290, i_category_id#291, sales#78, number_sales#79]
Input [6]: [i_brand_id#289, i_class_id#290, i_category_id#291, sales#78, number_sales#79, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#295 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#296 as decimal(12,2)))), DecimalType(18,2), true))#299]

(179) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#300, i_class_id#301, i_category_id#302, sum#303, isEmpty#304, count#305]

(180) HashAggregate [codegen id : 401]
Input [6]: [i_brand_id#300, i_class_id#301, i_category_id#302, sum#303, isEmpty#304, count#305]
Keys [3]: [i_brand_id#300, i_class_id#301, i_category_id#302]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#306 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#307 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#306 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#307 as decimal(12,2)))), DecimalType(18,2), true))#308, count(1)#309]
Results [6]: [i_brand_id#300, i_class_id#301, i_category_id#302, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#306 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#307 as decimal(12,2)))), DecimalType(18,2), true))#308 AS sales#98, count(1)#309 AS number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#306 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#307 as decimal(12,2)))), DecimalType(18,2), true))#308 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#306 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#307 as decimal(12,2)))), DecimalType(18,2), true))#310]

(181) Filter [codegen id : 401]
Input [6]: [i_brand_id#300, i_class_id#301, i_category_id#302, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#306 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#307 as decimal(12,2)))), DecimalType(18,2), true))#310]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#306 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#307 as decimal(12,2)))), DecimalType(18,2), true))#310) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#306 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#307 as decimal(12,2)))), DecimalType(18,2), true))#310 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#59, [id=#60] as decimal(32,6))))

(182) Project [codegen id : 401]
Output [6]: [web AS channel#101, i_brand_id#300, i_class_id#301, i_category_id#302, sales#98, number_sales#99]
Input [6]: [i_brand_id#300, i_class_id#301, i_category_id#302, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#306 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#307 as decimal(12,2)))), DecimalType(18,2), true))#310]

(183) Union

(184) HashAggregate [codegen id : 402]
Input [6]: [channel#61, i_brand_id#278, i_class_id#279, i_category_id#280, sales#56, number_sales#57]
Keys [4]: [channel#61, i_brand_id#278, i_class_id#279, i_category_id#280]
Functions [2]: [partial_sum(sales#56), partial_sum(number_sales#57)]
Aggregate Attributes [3]: [sum#311, isEmpty#312, sum#313]
Results [7]: [channel#61, i_brand_id#278, i_class_id#279, i_category_id#280, sum#314, isEmpty#315, sum#316]

(185) Exchange
Input [7]: [channel#61, i_brand_id#278, i_class_id#279, i_category_id#280, sum#314, isEmpty#315, sum#316]
Arguments: hashpartitioning(channel#61, i_brand_id#278, i_class_id#279, i_category_id#280, 5), ENSURE_REQUIREMENTS, [id=#317]

(186) HashAggregate [codegen id : 403]
Input [7]: [channel#61, i_brand_id#278, i_class_id#279, i_category_id#280, sum#314, isEmpty#315, sum#316]
Keys [4]: [channel#61, i_brand_id#278, i_class_id#279, i_category_id#280]
Functions [2]: [sum(sales#56), sum(number_sales#57)]
Aggregate Attributes [2]: [sum(sales#56)#318, sum(number_sales#57)#319]
Results [2]: [sum(sales#56)#318 AS sum_sales#111, sum(number_sales#57)#319 AS number_sales#112]

(187) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#111, number_sales#112]
Keys: []
Functions [2]: [partial_sum(sum_sales#111), partial_sum(number_sales#112)]
Aggregate Attributes [3]: [sum#320, isEmpty#321, sum#322]
Results [3]: [sum#323, isEmpty#324, sum#325]

(188) Exchange
Input [3]: [sum#323, isEmpty#324, sum#325]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#326]

(189) HashAggregate [codegen id : 404]
Input [3]: [sum#323, isEmpty#324, sum#325]
Keys: []
Functions [2]: [sum(sum_sales#111), sum(number_sales#112)]
Aggregate Attributes [2]: [sum(sum_sales#111)#327, sum(number_sales#112)#328]
Results [6]: [null AS channel#329, null AS i_brand_id#330, null AS i_class_id#331, null AS i_category_id#332, sum(sum_sales#111)#327 AS sum(sum_sales)#333, sum(number_sales#112)#328 AS sum(number_sales)#334]

(190) Union

(191) HashAggregate [codegen id : 405]
Input [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112]
Keys [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112]

(192) Exchange
Input [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112]
Arguments: hashpartitioning(channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112, 5), ENSURE_REQUIREMENTS, [id=#335]

(193) HashAggregate [codegen id : 406]
Input [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112]
Keys [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112]

(194) TakeOrderedAndProject
Input [6]: [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112]
Arguments: 100, [channel#61 ASC NULLS FIRST, i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#61, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#111, number_sales#112]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#59, [id=#60]
* HashAggregate (221)
+- Exchange (220)
   +- * HashAggregate (219)
      +- Union (218)
         :- * Project (203)
         :  +- * BroadcastHashJoin Inner BuildRight (202)
         :     :- * ColumnarToRow (196)
         :     :  +- Scan parquet default.store_sales (195)
         :     +- BroadcastExchange (201)
         :        +- * Project (200)
         :           +- * Filter (199)
         :              +- * ColumnarToRow (198)
         :                 +- Scan parquet default.date_dim (197)
         :- * Project (212)
         :  +- * BroadcastHashJoin Inner BuildRight (211)
         :     :- * ColumnarToRow (205)
         :     :  +- Scan parquet default.catalog_sales (204)
         :     +- BroadcastExchange (210)
         :        +- * Project (209)
         :           +- * Filter (208)
         :              +- * ColumnarToRow (207)
         :                 +- Scan parquet default.date_dim (206)
         +- * Project (217)
            +- * BroadcastHashJoin Inner BuildRight (216)
               :- * ColumnarToRow (214)
               :  +- Scan parquet default.web_sales (213)
               +- ReusedExchange (215)


(195) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#336)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(196) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(197) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_year#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(198) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#44]

(199) Filter [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#44]
Condition : (((isnotnull(d_year#44) AND (d_year#44 >= 1999)) AND (d_year#44 <= 2001)) AND isnotnull(d_date_sk#27))

(200) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_year#44]

(201) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#337]

(202) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(203) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#338, ss_list_price#3 AS list_price#339]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#27]

(204) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#340)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(205) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16]

(206) Scan parquet default.date_dim
Output [2]: [d_date_sk#341, d_year#342]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(207) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#341, d_year#342]

(208) Filter [codegen id : 3]
Input [2]: [d_date_sk#341, d_year#342]
Condition : (((isnotnull(d_year#342) AND (d_year#342 >= 1998)) AND (d_year#342 <= 2000)) AND isnotnull(d_date_sk#341))

(209) Project [codegen id : 3]
Output [1]: [d_date_sk#341]
Input [2]: [d_date_sk#341, d_year#342]

(210) BroadcastExchange
Input [1]: [d_date_sk#341]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#343]

(211) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#341]
Join condition: None

(212) Project [codegen id : 4]
Output [2]: [cs_quantity#62 AS quantity#344, cs_list_price#63 AS list_price#345]
Input [4]: [cs_quantity#62, cs_list_price#63, cs_sold_date_sk#16, d_date_sk#341]

(213) Scan parquet default.web_sales
Output [3]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#340)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(214) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33]

(215) ReusedExchange [Reuses operator id: 210]
Output [1]: [d_date_sk#346]

(216) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#346]
Join condition: None

(217) Project [codegen id : 6]
Output [2]: [ws_quantity#82 AS quantity#347, ws_list_price#83 AS list_price#348]
Input [4]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#33, d_date_sk#346]

(218) Union

(219) HashAggregate [codegen id : 7]
Input [2]: [quantity#338, list_price#339]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#338 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#339 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#349, count#350]
Results [2]: [sum#351, count#352]

(220) Exchange
Input [2]: [sum#351, count#352]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#353]

(221) HashAggregate [codegen id : 8]
Input [2]: [sum#351, count#352]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#338 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#339 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#338 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#339 as decimal(12,2)))), DecimalType(18,2), true))#354]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#338 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#339 as decimal(12,2)))), DecimalType(18,2), true))#354 AS average_sales#355]

Subquery:2 Hosting operator id = 195 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#336
ReusedExchange (222)


(222) ReusedExchange [Reuses operator id: 201]
Output [1]: [d_date_sk#27]

Subquery:3 Hosting operator id = 204 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#340
ReusedExchange (223)


(223) ReusedExchange [Reuses operator id: 210]
Output [1]: [d_date_sk#341]

Subquery:4 Hosting operator id = 213 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#340

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (224)


(224) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#27]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
ReusedExchange (225)


(225) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#27]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:8 Hosting operator id = 40 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#10

Subquery:9 Hosting operator id = 92 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:10 Hosting operator id = 78 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#5

Subquery:11 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:12 Hosting operator id = 94 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#5

Subquery:13 Hosting operator id = 116 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:14 Hosting operator id = 120 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:15 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:16 Hosting operator id = 135 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:17 Hosting operator id = 139 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:18 Hosting operator id = 143 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:19 Hosting operator id = 154 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:20 Hosting operator id = 158 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:21 Hosting operator id = 162 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:22 Hosting operator id = 173 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:23 Hosting operator id = 177 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]

Subquery:24 Hosting operator id = 181 Hosting Expression = ReusedSubquery Subquery scalar-subquery#59, [id=#60]


