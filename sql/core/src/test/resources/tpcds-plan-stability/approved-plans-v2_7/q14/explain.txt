== Physical Plan ==
TakeOrderedAndProject (100)
+- * BroadcastHashJoin Inner BuildRight (99)
   :- * Project (77)
   :  +- * Filter (76)
   :     +- * HashAggregate (75)
   :        +- Exchange (74)
   :           +- * HashAggregate (73)
   :              +- * Project (72)
   :                 +- * BroadcastHashJoin Inner BuildRight (71)
   :                    :- * Project (65)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (64)
   :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
   :                    :     :  :- * Filter (3)
   :                    :     :  :  +- * ColumnarToRow (2)
   :                    :     :  :     +- Scan parquet default.store_sales (1)
   :                    :     :  +- BroadcastExchange (56)
   :                    :     :     +- * Project (55)
   :                    :     :        +- * BroadcastHashJoin Inner BuildRight (54)
   :                    :     :           :- * Filter (6)
   :                    :     :           :  +- * ColumnarToRow (5)
   :                    :     :           :     +- Scan parquet default.item (4)
   :                    :     :           +- BroadcastExchange (53)
   :                    :     :              +- * HashAggregate (52)
   :                    :     :                 +- * HashAggregate (51)
   :                    :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (50)
   :                    :     :                       :- * HashAggregate (39)
   :                    :     :                       :  +- Exchange (38)
   :                    :     :                       :     +- * HashAggregate (37)
   :                    :     :                       :        +- * Project (36)
   :                    :     :                       :           +- * BroadcastHashJoin Inner BuildRight (35)
   :                    :     :                       :              :- * Project (33)
   :                    :     :                       :              :  +- * BroadcastHashJoin Inner BuildRight (32)
   :                    :     :                       :              :     :- * Filter (9)
   :                    :     :                       :              :     :  +- * ColumnarToRow (8)
   :                    :     :                       :              :     :     +- Scan parquet default.store_sales (7)
   :                    :     :                       :              :     +- BroadcastExchange (31)
   :                    :     :                       :              :        +- * BroadcastHashJoin LeftSemi BuildRight (30)
   :                    :     :                       :              :           :- * Filter (12)
   :                    :     :                       :              :           :  +- * ColumnarToRow (11)
   :                    :     :                       :              :           :     +- Scan parquet default.item (10)
   :                    :     :                       :              :           +- BroadcastExchange (29)
   :                    :     :                       :              :              +- * Project (28)
   :                    :     :                       :              :                 +- * BroadcastHashJoin Inner BuildRight (27)
   :                    :     :                       :              :                    :- * Project (21)
   :                    :     :                       :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
   :                    :     :                       :              :                    :     :- * Filter (15)
   :                    :     :                       :              :                    :     :  +- * ColumnarToRow (14)
   :                    :     :                       :              :                    :     :     +- Scan parquet default.catalog_sales (13)
   :                    :     :                       :              :                    :     +- BroadcastExchange (19)
   :                    :     :                       :              :                    :        +- * Filter (18)
   :                    :     :                       :              :                    :           +- * ColumnarToRow (17)
   :                    :     :                       :              :                    :              +- Scan parquet default.item (16)
   :                    :     :                       :              :                    +- BroadcastExchange (26)
   :                    :     :                       :              :                       +- * Project (25)
   :                    :     :                       :              :                          +- * Filter (24)
   :                    :     :                       :              :                             +- * ColumnarToRow (23)
   :                    :     :                       :              :                                +- Scan parquet default.date_dim (22)
   :                    :     :                       :              +- ReusedExchange (34)
   :                    :     :                       +- BroadcastExchange (49)
   :                    :     :                          +- * Project (48)
   :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (47)
   :                    :     :                                :- * Project (45)
   :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (44)
   :                    :     :                                :     :- * Filter (42)
   :                    :     :                                :     :  +- * ColumnarToRow (41)
   :                    :     :                                :     :     +- Scan parquet default.web_sales (40)
   :                    :     :                                :     +- ReusedExchange (43)
   :                    :     :                                +- ReusedExchange (46)
   :                    :     +- BroadcastExchange (63)
   :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
   :                    :           :- * Filter (60)
   :                    :           :  +- * ColumnarToRow (59)
   :                    :           :     +- Scan parquet default.item (58)
   :                    :           +- ReusedExchange (61)
   :                    +- BroadcastExchange (70)
   :                       +- * Project (69)
   :                          +- * Filter (68)
   :                             +- * ColumnarToRow (67)
   :                                +- Scan parquet default.date_dim (66)
   +- BroadcastExchange (98)
      +- * Project (97)
         +- * Filter (96)
            +- * HashAggregate (95)
               +- Exchange (94)
                  +- * HashAggregate (93)
                     +- * Project (92)
                        +- * BroadcastHashJoin Inner BuildRight (91)
                           :- * Project (85)
                           :  +- * BroadcastHashJoin Inner BuildRight (84)
                           :     :- * BroadcastHashJoin LeftSemi BuildRight (82)
                           :     :  :- * Filter (80)
                           :     :  :  +- * ColumnarToRow (79)
                           :     :  :     +- Scan parquet default.store_sales (78)
                           :     :  +- ReusedExchange (81)
                           :     +- ReusedExchange (83)
                           +- BroadcastExchange (90)
                              +- * Project (89)
                                 +- * Filter (88)
                                    +- * ColumnarToRow (87)
                                       +- Scan parquet default.date_dim (86)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) Scan parquet default.item
Output [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Condition : (((isnotnull(i_item_sk#11) AND isnotnull(i_brand_id#12)) AND isnotnull(i_class_id#13)) AND isnotnull(i_category_id#14))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(16) Scan parquet default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : isnotnull(i_item_sk#17)

(19) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#17]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#16, i_brand_id#18, i_class_id#19, i_category_id#20]
Input [6]: [cs_item_sk#15, cs_sold_date_sk#16, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(22) Scan parquet default.date_dim
Output [2]: [d_date_sk#22, d_year#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(23) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#22, d_year#23]

(24) Filter [codegen id : 2]
Input [2]: [d_date_sk#22, d_year#23]
Condition : (((isnotnull(d_year#23) AND (d_year#23 >= 1998)) AND (d_year#23 <= 2000)) AND isnotnull(d_date_sk#22))

(25) Project [codegen id : 2]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_year#23]

(26) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(27) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#22]
Join condition: None

(28) Project [codegen id : 3]
Output [3]: [i_brand_id#18, i_class_id#19, i_category_id#20]
Input [5]: [cs_sold_date_sk#16, i_brand_id#18, i_class_id#19, i_category_id#20, d_date_sk#22]

(29) BroadcastExchange
Input [3]: [i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(30) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#12, 0), isnull(i_brand_id#12), coalesce(i_class_id#13, 0), isnull(i_class_id#13), coalesce(i_category_id#14, 0), isnull(i_category_id#14)]
Right keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Join condition: None

(31) BroadcastExchange
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#11]
Join condition: None

(33) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#4, i_brand_id#12, i_class_id#13, i_category_id#14]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(34) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#27]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(36) Project [codegen id : 6]
Output [3]: [i_brand_id#12 AS brand_id#28, i_class_id#13 AS class_id#29, i_category_id#14 AS category_id#30]
Input [5]: [ss_sold_date_sk#4, i_brand_id#12, i_class_id#13, i_category_id#14, d_date_sk#27]

(37) HashAggregate [codegen id : 6]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(38) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(39) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(40) Scan parquet default.web_sales
Output [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(41) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]

(42) Filter [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(43) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(44) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#34]
Join condition: None

(45) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [6]: [ws_item_sk#32, ws_sold_date_sk#33, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(46) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#38]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#38]
Join condition: None

(48) Project [codegen id : 9]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]

(49) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(51) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(52) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(53) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#40]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join condition: None

(55) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#41]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(56) BroadcastExchange
Input [1]: [ss_item_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(57) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(58) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(59) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(60) Filter [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(61) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#41]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(63) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#43]

(64) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(65) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(66) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_week_seq#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(67) ColumnarToRow [codegen id : 24]
Input [2]: [d_date_sk#27, d_week_seq#44]

(68) Filter [codegen id : 24]
Input [2]: [d_date_sk#27, d_week_seq#44]
Condition : ((isnotnull(d_week_seq#44) AND (d_week_seq#44 = Subquery scalar-subquery#45, [id=#46])) AND isnotnull(d_date_sk#27))

(69) Project [codegen id : 24]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_week_seq#44]

(70) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(72) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#27]

(73) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#48, isEmpty#49, count#50]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#51, isEmpty#52, count#53]

(74) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#51, isEmpty#52, count#53]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#54]

(75) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#51, isEmpty#52, count#53]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#55, count(1)#56]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#55 AS sales#57, count(1)#56 AS number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#55 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59]

(76) Filter [codegen id : 52]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59 as decimal(32,6)) > cast(Subquery scalar-subquery#60, [id=#61] as decimal(32,6))))

(77) Project [codegen id : 52]
Output [6]: [store AS channel#62, i_brand_id#7, i_class_id#8, i_category_id#9, sales#57, number_sales#58]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#57, number_sales#58, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59]

(78) Scan parquet default.store_sales
Output [4]: [ss_item_sk#63, ss_quantity#64, ss_list_price#65, ss_sold_date_sk#66]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#66), dynamicpruningexpression(ss_sold_date_sk#66 IN dynamicpruning#67)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 50]
Input [4]: [ss_item_sk#63, ss_quantity#64, ss_list_price#65, ss_sold_date_sk#66]

(80) Filter [codegen id : 50]
Input [4]: [ss_item_sk#63, ss_quantity#64, ss_list_price#65, ss_sold_date_sk#66]
Condition : isnotnull(ss_item_sk#63)

(81) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#41]

(82) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#63]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(83) ReusedExchange [Reuses operator id: 63]
Output [4]: [i_item_sk#68, i_brand_id#69, i_class_id#70, i_category_id#71]

(84) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#63]
Right keys [1]: [i_item_sk#68]
Join condition: None

(85) Project [codegen id : 50]
Output [6]: [ss_quantity#64, ss_list_price#65, ss_sold_date_sk#66, i_brand_id#69, i_class_id#70, i_category_id#71]
Input [8]: [ss_item_sk#63, ss_quantity#64, ss_list_price#65, ss_sold_date_sk#66, i_item_sk#68, i_brand_id#69, i_class_id#70, i_category_id#71]

(86) Scan parquet default.date_dim
Output [2]: [d_date_sk#72, d_week_seq#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(87) ColumnarToRow [codegen id : 49]
Input [2]: [d_date_sk#72, d_week_seq#73]

(88) Filter [codegen id : 49]
Input [2]: [d_date_sk#72, d_week_seq#73]
Condition : ((isnotnull(d_week_seq#73) AND (d_week_seq#73 = Subquery scalar-subquery#74, [id=#75])) AND isnotnull(d_date_sk#72))

(89) Project [codegen id : 49]
Output [1]: [d_date_sk#72]
Input [2]: [d_date_sk#72, d_week_seq#73]

(90) BroadcastExchange
Input [1]: [d_date_sk#72]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76]

(91) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_sold_date_sk#66]
Right keys [1]: [d_date_sk#72]
Join condition: None

(92) Project [codegen id : 50]
Output [5]: [ss_quantity#64, ss_list_price#65, i_brand_id#69, i_class_id#70, i_category_id#71]
Input [7]: [ss_quantity#64, ss_list_price#65, ss_sold_date_sk#66, i_brand_id#69, i_class_id#70, i_category_id#71, d_date_sk#72]

(93) HashAggregate [codegen id : 50]
Input [5]: [ss_quantity#64, ss_list_price#65, i_brand_id#69, i_class_id#70, i_category_id#71]
Keys [3]: [i_brand_id#69, i_class_id#70, i_category_id#71]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#77, isEmpty#78, count#79]
Results [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sum#80, isEmpty#81, count#82]

(94) Exchange
Input [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sum#80, isEmpty#81, count#82]
Arguments: hashpartitioning(i_brand_id#69, i_class_id#70, i_category_id#71, 5), ENSURE_REQUIREMENTS, [id=#83]

(95) HashAggregate [codegen id : 51]
Input [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sum#80, isEmpty#81, count#82]
Keys [3]: [i_brand_id#69, i_class_id#70, i_category_id#71]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#84, count(1)#85]
Results [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#84 AS sales#86, count(1)#85 AS number_sales#87, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#84 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#88]

(96) Filter [codegen id : 51]
Input [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sales#86, number_sales#87, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#88]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#88) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#88 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#60, [id=#61] as decimal(32,6))))

(97) Project [codegen id : 51]
Output [6]: [store AS channel#89, i_brand_id#69, i_class_id#70, i_category_id#71, sales#86, number_sales#87]
Input [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sales#86, number_sales#87, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#88]

(98) BroadcastExchange
Input [6]: [channel#89, i_brand_id#69, i_class_id#70, i_category_id#71, sales#86, number_sales#87]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#90]

(99) BroadcastHashJoin [codegen id : 52]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [i_brand_id#69, i_class_id#70, i_category_id#71]
Join condition: None

(100) TakeOrderedAndProject
Input [12]: [channel#62, i_brand_id#7, i_class_id#8, i_category_id#9, sales#57, number_sales#58, channel#89, i_brand_id#69, i_class_id#70, i_category_id#71, sales#86, number_sales#87]
Arguments: 100, [i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#62, i_brand_id#7, i_class_id#8, i_category_id#9, sales#57, number_sales#58, channel#89, i_brand_id#69, i_class_id#70, i_category_id#71, sales#86, number_sales#87]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#60, [id=#61]
* HashAggregate (123)
+- Exchange (122)
   +- * HashAggregate (121)
      +- Union (120)
         :- * Project (109)
         :  +- * BroadcastHashJoin Inner BuildRight (108)
         :     :- * ColumnarToRow (102)
         :     :  +- Scan parquet default.store_sales (101)
         :     +- BroadcastExchange (107)
         :        +- * Project (106)
         :           +- * Filter (105)
         :              +- * ColumnarToRow (104)
         :                 +- Scan parquet default.date_dim (103)
         :- * Project (114)
         :  +- * BroadcastHashJoin Inner BuildRight (113)
         :     :- * ColumnarToRow (111)
         :     :  +- Scan parquet default.catalog_sales (110)
         :     +- ReusedExchange (112)
         +- * Project (119)
            +- * BroadcastHashJoin Inner BuildRight (118)
               :- * ColumnarToRow (116)
               :  +- Scan parquet default.web_sales (115)
               +- ReusedExchange (117)


(101) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#91)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(102) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(103) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_year#92]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(104) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#92]

(105) Filter [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#92]
Condition : (((isnotnull(d_year#92) AND (d_year#92 >= 1998)) AND (d_year#92 <= 2000)) AND isnotnull(d_date_sk#27))

(106) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_year#92]

(107) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#93]

(108) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#27]
Join condition: None

(109) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#94, ss_list_price#3 AS list_price#95]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#27]

(110) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#96, cs_list_price#97, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#91)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(111) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#96, cs_list_price#97, cs_sold_date_sk#16]

(112) ReusedExchange [Reuses operator id: 107]
Output [1]: [d_date_sk#98]

(113) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#98]
Join condition: None

(114) Project [codegen id : 4]
Output [2]: [cs_quantity#96 AS quantity#99, cs_list_price#97 AS list_price#100]
Input [4]: [cs_quantity#96, cs_list_price#97, cs_sold_date_sk#16, d_date_sk#98]

(115) Scan parquet default.web_sales
Output [3]: [ws_quantity#101, ws_list_price#102, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#91)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(116) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#101, ws_list_price#102, ws_sold_date_sk#33]

(117) ReusedExchange [Reuses operator id: 107]
Output [1]: [d_date_sk#103]

(118) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#103]
Join condition: None

(119) Project [codegen id : 6]
Output [2]: [ws_quantity#101 AS quantity#104, ws_list_price#102 AS list_price#105]
Input [4]: [ws_quantity#101, ws_list_price#102, ws_sold_date_sk#33, d_date_sk#103]

(120) Union

(121) HashAggregate [codegen id : 7]
Input [2]: [quantity#94, list_price#95]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#94 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#106, count#107]
Results [2]: [sum#108, count#109]

(122) Exchange
Input [2]: [sum#108, count#109]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#110]

(123) HashAggregate [codegen id : 8]
Input [2]: [sum#108, count#109]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#94 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#94 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2), true))#111]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#94 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2), true))#111 AS average_sales#112]

Subquery:2 Hosting operator id = 101 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#91
ReusedExchange (124)


(124) ReusedExchange [Reuses operator id: 107]
Output [1]: [d_date_sk#27]

Subquery:3 Hosting operator id = 110 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#91

Subquery:4 Hosting operator id = 115 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#91

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (125)


(125) ReusedExchange [Reuses operator id: 70]
Output [1]: [d_date_sk#27]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
ReusedExchange (126)


(126) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#27]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:8 Hosting operator id = 40 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#10

Subquery:9 Hosting operator id = 68 Hosting Expression = Subquery scalar-subquery#45, [id=#46]
* Project (130)
+- * Filter (129)
   +- * ColumnarToRow (128)
      +- Scan parquet default.date_dim (127)


(127) Scan parquet default.date_dim
Output [4]: [d_week_seq#44, d_year#92, d_moy#113, d_dom#114]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(128) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#44, d_year#92, d_moy#113, d_dom#114]

(129) Filter [codegen id : 1]
Input [4]: [d_week_seq#44, d_year#92, d_moy#113, d_dom#114]
Condition : (((((isnotnull(d_year#92) AND isnotnull(d_moy#113)) AND isnotnull(d_dom#114)) AND (d_year#92 = 1999)) AND (d_moy#113 = 12)) AND (d_dom#114 = 16))

(130) Project [codegen id : 1]
Output [1]: [d_week_seq#44]
Input [4]: [d_week_seq#44, d_year#92, d_moy#113, d_dom#114]

Subquery:10 Hosting operator id = 96 Hosting Expression = ReusedSubquery Subquery scalar-subquery#60, [id=#61]

Subquery:11 Hosting operator id = 78 Hosting Expression = ss_sold_date_sk#66 IN dynamicpruning#67
ReusedExchange (131)


(131) ReusedExchange [Reuses operator id: 90]
Output [1]: [d_date_sk#72]

Subquery:12 Hosting operator id = 88 Hosting Expression = Subquery scalar-subquery#74, [id=#75]
* Project (135)
+- * Filter (134)
   +- * ColumnarToRow (133)
      +- Scan parquet default.date_dim (132)


(132) Scan parquet default.date_dim
Output [4]: [d_week_seq#44, d_year#92, d_moy#113, d_dom#114]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(133) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#44, d_year#92, d_moy#113, d_dom#114]

(134) Filter [codegen id : 1]
Input [4]: [d_week_seq#44, d_year#92, d_moy#113, d_dom#114]
Condition : (((((isnotnull(d_year#92) AND isnotnull(d_moy#113)) AND isnotnull(d_dom#114)) AND (d_year#92 = 1998)) AND (d_moy#113 = 12)) AND (d_dom#114 = 16))

(135) Project [codegen id : 1]
Output [1]: [d_week_seq#44]
Input [4]: [d_week_seq#44, d_year#92, d_moy#113, d_dom#114]


