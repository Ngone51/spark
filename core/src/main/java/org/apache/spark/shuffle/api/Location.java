package org.apache.spark.shuffle.api;

import org.apache.spark.annotation.Private;

import java.io.Externalizable;
import java.io.ObjectInput;
import java.io.ObjectOutput;


/**
 * :: Private ::
 * An interface for plugging in the location of shuffle files, in order to support store shuffle
 * data in different storage, e.g., BlockManager, HDFS, S3. It would be generated by
 * {@link ShuffleMapOutputWriter} after writing a shuffle data file and used by ShuffleMapOutputReader
 * to read the shuffle data.
 *
 * Since the location is returned by {@link ShuffleMapOutputWriter#commitAllPartitions()} at executor
 * and would be sent to driver, users must ensure the location is serializable by
 *
 *  - implement a 0-arg constructor
 *  - implement {@link java.io.Externalizable#readExternal(ObjectInput)} for deserialization
 *  - implement {@link java.io.Externalizable#writeExternal(ObjectOutput)} for serialization
 *
 * Since the location will be used as keys in maps or comparing with others, users must ensure that
 * invoking {@link java.lang.Object#equals(Object)} or {@link java.lang.Object#hashCode()} on the
 * {@link Location} instances would distinguish the different locations.
 *
 * @since 3.2.0
 */
@Private
public interface Location extends Externalizable {
}
